[
    {
        "question": "What is the difference between a list and a tuple in Python?",
        "answers": [
            {
                "text": "A list is mutable, but a tuple is immutable. Lists are slower than tuples.",
                "score": 5,
                "feedback": "Excellent answer, covering both mutability and performance."
            },
            {
                "text": "Lists are changeable, tuples are not. Lists use square brackets, tuples use parentheses.",
                "score": 4,
                "feedback": "Good, but missing performance difference."
            },
            {
                "text": "Lists can be changed, but tuples cannot. Both are used to store multiple items.",
                "score": 3,
                "feedback": "Partially correct. Lacks explanation of brackets and speed difference."
            },
            {
                "text": "Lists are better than tuples because they are flexible.",
                "score": 2,
                "feedback": "Too vague. Needs to explain mutability and syntax differences."
            },
            {
                "text": "No difference, both are the same.",
                "score": 0,
                "feedback": "Incorrect. Lists are mutable, tuples are immutable."
            }
        ]
    },
    {
        "question": "What is the purpose of the __init__ method in Python classes?",
        "answers": [
            {
                "text": "The `__init__` method initializes the instance variables of a class when an object is created.",
                "score": 5,
                "feedback": "Perfect answer. Clearly explains initialization."
            },
            {
                "text": "It is the constructor in Python, used to assign values to object properties.",
                "score": 4,
                "feedback": "Good, but could mention instance variables explicitly."
            },
            {
                "text": "`__init__` is a special method that runs automatically when an object is created.",
                "score": 3,
                "feedback": "Correct, but lacks explanation of initialization."
            },
            {
                "text": "It is a function in Python classes.",
                "score": 1,
                "feedback": "Too generic. Needs to explain its purpose in object creation."
            },
            {
                "text": "Not necessary for Python classes.",
                "score": 0,
                "feedback": "Incorrect. `__init__` is essential for object initialization."
            }
        ]
    },
    {
        "question": "Explain the concept of inheritance in Object-Oriented Programming.",
        "answers": [
            {
                "text": "Inheritance allows a class to acquire the properties and methods of another class, enabling code reusability and hierarchical classification.",
                "score": 5,
                "feedback": "Excellent. Covers all key points of inheritance."
            },
            {
                "text": "A child class can use the functions and variables of a parent class.",
                "score": 4,
                "feedback": "Correct but could explain why inheritance is useful."
            },
            {
                "text": "Inheritance is when a class takes the properties of another class.",
                "score": 3,
                "feedback": "Partially correct but lacks details on functionality."
            },
            {
                "text": "It is when an object can inherit characteristics from another object.",
                "score": 2,
                "feedback": "Confusing explanation. Needs to mention classes."
            },
            {
                "text": "Inheritance is not used in Python.",
                "score": 0,
                "feedback": "Incorrect. Python supports multiple types of inheritance."
            }
        ]
    },
    {
        "question": "What are instance and class variables in Python?",
        "answers": [
            {
                "text": "Instance variables are unique to each object, while class variables are shared across all instances of a class.",
                "score": 5,
                "feedback": "Great answer, covers both concepts correctly."
            },
            {
                "text": "Instance variables belong to an object, and class variables belong to the class.",
                "score": 4,
                "feedback": "Correct but could elaborate on how class variables are shared."
            },
            {
                "text": "Instance variables change per object; class variables donâ€™t.",
                "score": 3,
                "feedback": "Partially correct but lacks clarity on usage."
            },
            {
                "text": "Instance variables are stored in a function, class variables are not.",
                "score": 2,
                "feedback": "Incorrect explanation. Needs clarification."
            },
            {
                "text": "Both are the same in Python.",
                "score": 0,
                "feedback": "Incorrect. They serve different purposes."
            }
        ]
    },
    {
        "question": "What is polymorphism in OOP?",
        "answers": [
            {
                "text": "Polymorphism allows the same function or method to work differently based on the object calling it.",
                "score": 5,
                "feedback": "Excellent. Explains behavior-based differences."
            },
            {
                "text": "It means one thing can have multiple forms in programming.",
                "score": 4,
                "feedback": "Correct but could be more specific."
            },
            {
                "text": "Polymorphism allows functions with the same name to be reused.",
                "score": 3,
                "feedback": "Not entirely wrong, but needs details on object-oriented use."
            },
            {
                "text": "It is when two classes inherit the same property.",
                "score": 1,
                "feedback": "Incorrect definition, confusing with inheritance."
            },
            {
                "text": "Not used in Python.",
                "score": 0,
                "feedback": "Wrong. Python supports polymorphism."
            }
        ]
    },
    {
        "question": "What is the difference between shallow copy and deep copy?",
        "answers": [
            {
                "text": "A shallow copy copies references, while a deep copy creates a new object with its own copy of the data.",
                "score": 5,
                "feedback": "Excellent, captures both key differences."
            },
            {
                "text": "Shallow copies copy references; deep copies copy data.",
                "score": 4,
                "feedback": "Good but lacks explanation on object creation."
            },
            {
                "text": "A shallow copy means copying an object; deep copy means copying its data.",
                "score": 3,
                "feedback": "Needs more clarity on how references work."
            },
            {
                "text": "Shallow copy is for lists, deep copy is for dictionaries.",
                "score": 1,
                "feedback": "Incorrect, copying applies to all mutable objects."
            },
            {
                "text": "No difference between the two.",
                "score": 0,
                "feedback": "Wrong. They function differently."
            }
        ]
    },
    {
        "question": "What is the purpose of the 'self' keyword in Python?",
        "answers": [
            {
                "text": "The 'self' keyword represents the instance of a class and is used to access instance variables and methods.",
                "score": 5,
                "feedback": "Great explanation of instance representation."
            },
            {
                "text": "'self' is a reference to the object itself.",
                "score": 4,
                "feedback": "Correct but could expand on method usage."
            },
            {
                "text": "'self' is used to call a function inside a class.",
                "score": 3,
                "feedback": "Partially correct, but not limited to function calls."
            },
            {
                "text": "'self' is a Python keyword like 'def' or 'for'.",
                "score": 1,
                "feedback": "Incorrect. 'self' is a convention, not a reserved keyword."
            },
            {
                "text": "Not necessary in Python classes.",
                "score": 0,
                "feedback": "Wrong. It is required for instance methods."
            }
        ]
    },
    {
        "question": "Explain encapsulation in OOP.",
        "answers": [
            {
                "text": "Encapsulation is restricting direct access to data and methods by using private variables and getter/setter methods.",
                "score": 5,
                "feedback": "Perfect, complete definition of encapsulation."
            },
            {
                "text": "It is about hiding data in a class to prevent direct access.",
                "score": 4,
                "feedback": "Correct but could include access control."
            },
            {
                "text": "Encapsulation means using functions to modify class data.",
                "score": 3,
                "feedback": "Partially correct, but does not mention access control."
            },
            {
                "text": "Encapsulation is when one class inherits another.",
                "score": 1,
                "feedback": "Incorrect, this describes inheritance."
            },
            {
                "text": "Encapsulation is not used in Python.",
                "score": 0,
                "feedback": "Wrong. Python supports encapsulation with private/protected attributes."
            }
        ]
    },
    {
        "question": "What is method overloading in Python?",
        "answers": [
            {
                "text": "Method overloading allows multiple functions with the same name but different parameters in a class.",
                "score": 5,
                "feedback": "Excellent! Covers function name reuse and parameter differences."
            },
            {
                "text": "Method overloading is when a class has two methods with the same name but different arguments.",
                "score": 4,
                "feedback": "Correct, but could mention Python handles it differently than Java."
            },
            {
                "text": "It is a feature where we define multiple methods with the same name.",
                "score": 3,
                "feedback": "Partially correct, but missing details on parameters."
            },
            {
                "text": "Method overloading is when a child class redefines a method.",
                "score": 1,
                "feedback": "Incorrect. This describes method overriding."
            },
            {
                "text": "Python does not support method overloading.",
                "score": 0,
                "feedback": "Incorrect. While Python does not support it like Java, we can achieve similar behavior using default arguments."
            }
        ]
    },
    {
        "question": "What is a lambda function in Python?",
        "answers": [
            {
                "text": "A lambda function is an anonymous function defined using the 'lambda' keyword, useful for short operations.",
                "score": 5,
                "feedback": "Great answer! Covers both anonymity and purpose."
            },
            {
                "text": "A function that does not have a name and is used for one-time operations.",
                "score": 4,
                "feedback": "Good, but could include the 'lambda' keyword."
            },
            {
                "text": "A way to create functions in Python.",
                "score": 3,
                "feedback": "Partially correct, but lacks detail on syntax and anonymity."
            },
            {
                "text": "A lambda function is a normal function in Python.",
                "score": 1,
                "feedback": "Incorrect. It is an anonymous function."
            },
            {
                "text": "Lambda functions do not exist in Python.",
                "score": 0,
                "feedback": "Incorrect. Lambda functions are widely used in Python."
            }
        ]
    },
    {
        "question": "What is the difference between 'is' and '==' operators in Python?",
        "answers": [
            {
                "text": "'is' checks object identity, while '==' checks for value equality.",
                "score": 5,
                "feedback": "Perfect! Covers identity vs. equality."
            },
            {
                "text": "'is' checks if two variables reference the same object, '==' checks if values are the same.",
                "score": 4,
                "feedback": "Good! But could be more detailed."
            },
            {
                "text": "Both are used for comparison in Python.",
                "score": 3,
                "feedback": "Partially correct, but vague. Needs differentiation."
            },
            {
                "text": "'is' and '==' do the same thing.",
                "score": 1,
                "feedback": "Incorrect. They have different purposes."
            },
            {
                "text": "There is no 'is' operator in Python.",
                "score": 0,
                "feedback": "Incorrect. 'is' is an identity operator in Python."
            }
        ]
    },
    {
        "question": "What is multiple inheritance in Python?",
        "answers": [
            {
                "text": "Multiple inheritance allows a class to inherit from more than one parent class.",
                "score": 5,
                "feedback": "Excellent! Clearly explains the concept."
            },
            {
                "text": "A class can inherit from multiple classes and use their attributes and methods.",
                "score": 4,
                "feedback": "Good answer, but could mention method resolution order (MRO)."
            },
            {
                "text": "It is when two classes inherit the same parent.",
                "score": 3,
                "feedback": "Not entirely wrong, but describes hierarchy rather than multiple inheritance."
            },
            {
                "text": "Multiple inheritance is when a parent class has multiple child classes.",
                "score": 2,
                "feedback": "Incorrect. This describes hierarchical inheritance."
            },
            {
                "text": "Python does not support multiple inheritance.",
                "score": 0,
                "feedback": "Incorrect. Python supports multiple inheritance using MRO."
            }
        ]
    },
    {
        "question": "What is a decorator in Python?",
        "answers": [
            {
                "text": "A decorator is a function that modifies another functionâ€™s behavior without changing its structure.",
                "score": 5,
                "feedback": "Great explanation! Captures function modification aspect."
            },
            {
                "text": "A decorator allows us to wrap another function to modify its behavior.",
                "score": 4,
                "feedback": "Correct, but could include '@' syntax."
            },
            {
                "text": "A function that is used to decorate Python code.",
                "score": 3,
                "feedback": "Partially correct, but lacks specifics."
            },
            {
                "text": "A decorator is used to create loops in Python.",
                "score": 1,
                "feedback": "Incorrect. Decorators modify function behavior, not loops."
            },
            {
                "text": "Decorators are not available in Python.",
                "score": 0,
                "feedback": "Incorrect. Python supports decorators using '@'."
            }
        ]
    },
    {
        "question": "What is the difference between deep copy and shallow copy?",
        "answers": [
            {
                "text": "A deep copy creates a new object and copies the original data, while a shallow copy copies references.",
                "score": 5,
                "feedback": "Excellent! Covers both behavior and object creation."
            },
            {
                "text": "Deep copy makes a separate memory copy, while shallow copy shares references.",
                "score": 4,
                "feedback": "Good explanation, but could clarify more about mutable objects."
            },
            {
                "text": "Shallow copy duplicates an object, deep copy does not.",
                "score": 3,
                "feedback": "Incorrect. Deep copy duplicates the object, not the other way around."
            },
            {
                "text": "Both do the same thing.",
                "score": 1,
                "feedback": "Incorrect. They work differently in Python."
            },
            {
                "text": "No difference between them.",
                "score": 0,
                "feedback": "Wrong. Deep copy and shallow copy behave differently."
            }
        ]
    },
    {
        "question": "What are Python's key data types?",
        "answers": [
            {
                "text": "Python has several key data types: int, float, str, bool, list, tuple, dict, and set.",
                "score": 5,
                "feedback": "Excellent! Covers all fundamental data types."
            },
            {
                "text": "Python data types include integers, floats, strings, and lists.",
                "score": 4,
                "feedback": "Good, but missing some key types like tuples and sets."
            },
            {
                "text": "Python has numbers and text data types.",
                "score": 2,
                "feedback": "Too vague. Needs specific data types."
            },
            {
                "text": "There are no types in Python.",
                "score": 0,
                "feedback": "Incorrect. Python is dynamically typed but has distinct data types."
            }
        ]
    },
    {
        "question": "What is the difference between break and continue in Python?",
        "answers": [
            {
                "text": "'break' exits the loop completely, while 'continue' skips the current iteration and moves to the next.",
                "score": 5,
                "feedback": "Excellent! Clearly explains both keywords."
            },
            {
                "text": "'break' stops a loop, 'continue' moves to the next loop cycle.",
                "score": 4,
                "feedback": "Good answer, but could be slightly more precise."
            },
            {
                "text": "'break' and 'continue' both exit a loop.",
                "score": 2,
                "feedback": "Incorrect. 'continue' does not exit the loop."
            },
            {
                "text": "'break' and 'continue' are the same thing.",
                "score": 0,
                "feedback": "Incorrect. They serve different purposes."
            }
        ]
    },
    {
        "question": "What is the difference between a function and a method in Python?",
        "answers": [
            {
                "text": "A function is an independent block of code, while a method is a function that belongs to an object.",
                "score": 5,
                "feedback": "Great distinction between functions and methods."
            },
            {
                "text": "A function is standalone; a method is tied to a class.",
                "score": 4,
                "feedback": "Good, but could be more detailed."
            },
            {
                "text": "Functions and methods are the same in Python.",
                "score": 1,
                "feedback": "Incorrect. Methods belong to objects, functions do not necessarily."
            },
            {
                "text": "There are no methods in Python, only functions.",
                "score": 0,
                "feedback": "Incorrect. Python has methods within classes."
            }
        ]
    },
    {
        "question": "What is the difference between *args and **kwargs in Python?",
        "answers": [
            {
                "text": "'*args' allows passing multiple positional arguments, while '**kwargs' allows multiple keyword arguments.",
                "score": 5,
                "feedback": "Perfect! Covers both arguments clearly."
            },
            {
                "text": "'*args' is for multiple values, '**kwargs' is for named values.",
                "score": 4,
                "feedback": "Good answer, but could elaborate more."
            },
            {
                "text": "'*args' and '**kwargs' do the same thing.",
                "score": 1,
                "feedback": "Incorrect. They have different purposes."
            },
            {
                "text": "Python does not support '*args' and '**kwargs'.",
                "score": 0,
                "feedback": "Incorrect. Python allows both for flexible arguments."
            }
        ]
    },
    {
        "question": "Explain the difference between static and instance methods in Python.",
        "answers": [
            {
                "text": "Instance methods operate on an instance of a class, while static methods do not require an instance.",
                "score": 5,
                "feedback": "Great explanation of instance vs. static methods."
            },
            {
                "text": "Static methods are independent; instance methods depend on an object.",
                "score": 4,
                "feedback": "Correct, but could explain '@staticmethod'."
            },
            {
                "text": "Instance and static methods are the same.",
                "score": 1,
                "feedback": "Incorrect. They have different behaviors."
            },
            {
                "text": "Python does not have static methods.",
                "score": 0,
                "feedback": "Incorrect. Python allows static methods with '@staticmethod'."
            }
        ]
    },
    {
            "question": "What is cross-validation in machine learning?",
            "answers": [
                {
                    "text": "Cross-validation is a technique for assessing how a model will generalize to an independent dataset by partitioning data into training and validation sets multiple times.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "Cross-validation is a method used to test machine learning models by splitting data into different subsets, ensuring better generalization.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "Cross-validation is a technique that involves splitting the dataset into different training and test sets, but it is not always needed for model evaluation.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "Cross-validation is a method that helps test models, but it does not significantly affect their accuracy.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "Cross-validation is just a way of randomly dividing data without any structured approach.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "Explain the concept of overfitting in machine learning.",
            "answers": [
                {
                    "text": "Overfitting occurs when a model learns noise and patterns from the training data too well, leading to poor performance on new, unseen data.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "Overfitting happens when a model is overly complex, fitting the training data very well but failing to generalize.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "Overfitting is when a model has too many parameters and fits the training data exactly, but this may or may not be a problem.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "Overfitting is when a model memorizes data instead of finding patterns, but increasing data always fixes it.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "Overfitting does not impact models significantly, as more complex models always perform better.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What is the difference between parametric and non-parametric models?",
            "answers": [
                {
                    "text": "Parametric models assume a fixed number of parameters, while non-parametric models do not, allowing them to adapt based on the dataset.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "Parametric models rely on predefined assumptions about the data, whereas non-parametric models are more flexible and data-driven.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "Parametric models use mathematical functions to make predictions, while non-parametric models work without predefined equations.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "Parametric models are just statistical models, while non-parametric models are based on AI techniques.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "There is no significant difference between parametric and non-parametric models.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What is dimensionality reduction?",
            "answers": [
                {
                    "text": "Dimensionality reduction is a process of reducing the number of features in a dataset while retaining as much relevant information as possible.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "Dimensionality reduction simplifies data by removing redundant or less important features, improving model efficiency.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "Dimensionality reduction involves selecting the most relevant features, but it may lead to loss of information.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "Dimensionality reduction is a method where we delete unnecessary features from a dataset.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "Dimensionality reduction is the process of randomly removing features from data.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
    },
    {
        "question": "What is the curse of dimensionality?",
        "answers": [
            {
                "text": "The curse of dimensionality refers to the phenomenon where an increase in the number of features negatively impacts model performance due to sparsity.",
                "score": 5,
                "feedback": "Excellent! Well-explained with clarity."
            },
            {
                "text": "As dimensionality increases, data points become more sparse, making distance-based models less effective.",
                "score": 4,
                "feedback": "Good answer! Some details could be expanded upon."
            },
            {
                "text": "More features in a dataset can lead to computational complexity, but this is not always an issue.",
                "score": 3,
                "feedback": "Partially correct, but missing some key aspects."
            },
            {
                "text": "The curse of dimensionality means that adding more features always leads to worse performance.",
                "score": 2,
                "feedback": "Needs improvement. Consider covering the concept more clearly."
            },
            {
                "text": "There is no such thing as the curse of dimensionality; adding more features always helps models.",
                "score": 0,
                "feedback": "Incorrect. Please review the concept carefully."
            }
        ]
    },
    {
        "question": "What are precision, recall, and F1-score?",
        "answers": [
            {
                "text": "Precision measures the proportion of correctly predicted positive cases, recall measures the ability to detect all positive cases, and F1-score balances both.",
                "score": 5,
                "feedback": "Excellent! Well-explained with clarity."
            },
            {
                "text": "Precision is the accuracy of positive predictions, recall measures the ability to capture positives, and F1-score is their harmonic mean.",
                "score": 4,
                "feedback": "Good answer! Some details could be expanded upon."
            },
            {
                "text": "Precision and recall measure model accuracy, but they are interchangeable.",
                "score": 3,
                "feedback": "Partially correct, but missing some key aspects."
            },
            {
                "text": "Precision and recall are two unrelated metrics, and F1-score is not necessary.",
                "score": 2,
                "feedback": "Needs improvement. Consider covering the concept more clearly."
            },
            {
                "text": "Precision, recall, and F1-score do not matter as long as accuracy is high.",
                "score": 0,
                "feedback": "Incorrect. Please review the concept carefully."
            }
        ]
    },
    {
        "question": "What is the difference between regression and classification?",
        "answers": [
            {
                "text": "Regression predicts continuous numerical values, whereas classification assigns discrete labels to input data.",
                "score": 5,
                "feedback": "Excellent! Well-explained with clarity."
            },
            {
                "text": "Regression models aim to predict numerical outcomes, while classification sorts inputs into predefined categories.",
                "score": 4,
                "feedback": "Good answer! Some details could be expanded upon."
            },
            {
                "text": "Regression and classification both make predictions, but classification involves fewer calculations.",
                "score": 3,
                "feedback": "Partially correct, but missing some key aspects."
            },
            {
                "text": "Regression and classification are the same concepts, used interchangeably in machine learning.",
                "score": 2,
                "feedback": "Needs improvement. Consider covering the concept more clearly."
            },
            {
                "text": "There is no difference between regression and classification; both are used for making predictions.",
                "score": 0,
                "feedback": "Incorrect. Please review the concept carefully."
            }
        ]
    },
    {
        "question": "What is feature engineering?",
        "answers": [
            {
                "text": "Feature engineering is the process of creating, transforming, or selecting relevant features to improve a machine learning modelâ€™s performance.",
                "score": 5,
                "feedback": "Excellent! Well-explained with clarity."
            },
            {
                "text": "Feature engineering involves modifying or creating features that help improve a modelâ€™s predictive power.",
                "score": 4,
                "feedback": "Good answer! Some details could be expanded upon."
            },
            {
                "text": "Feature engineering is a technique used to select relevant features, but it is not necessary in all models.",
                "score": 3,
                "feedback": "Partially correct, but missing some key aspects."
            },
            {
                "text": "Feature engineering is just another name for data cleaning.",
                "score": 2,
                "feedback": "Needs improvement. Consider covering the concept more clearly."
            },
            {
                "text": "Feature engineering is unnecessary, as models learn everything on their own.",
                "score": 0,
                "feedback": "Incorrect. Please review the concept carefully."
            }
        ]
    },
    {
        "question": "What is PCA (Principal Component Analysis)?",
        "answers": [
            {
                "text": "PCA is a dimensionality reduction technique that transforms correlated features into a set of uncorrelated principal components.",
                "score": 5,
                "feedback": "Excellent! Well-explained with clarity."
            },
            {
                "text": "PCA reduces the number of dimensions in data by finding the most important features.",
                "score": 4,
                "feedback": "Good answer! Some details could be expanded upon."
            },
            {
                "text": "PCA helps with dimensionality reduction, but it does not always improve model performance.",
                "score": 3,
                "feedback": "Partially correct, but missing some key aspects."
            },
            {
                "text": "PCA is a technique used for making models faster by removing features randomly.",
                "score": 2,
                "feedback": "Needs improvement. Consider covering the concept more clearly."
            },
            {
                "text": "PCA is an outdated method that is not used anymore in machine learning.",
                "score": 0,
                "feedback": "Incorrect. Please review the concept carefully."
            }
        ]
    },
        {
            "question": "What is a confusion matrix?",
            "answers": [
                {
                    "text": "A confusion matrix is a table used to evaluate the performance of a classification model by showing the counts of true positives, false positives, true negatives, and false negatives.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "A confusion matrix is a performance measurement tool for classification models that provides insights into accuracy and error types.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "A confusion matrix is a matrix that shows correct and incorrect predictions but does not give information on model performance metrics like precision or recall.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "A confusion matrix is just a table listing the model's predictions without further insights.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "A confusion matrix is not necessary for evaluating models; accuracy alone is enough.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "Explain entropy and information gain in decision trees.",
            "answers": [
                {
                    "text": "Entropy is a measure of impurity in a dataset, and information gain calculates the reduction in entropy when splitting a dataset on an attribute.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "Entropy quantifies uncertainty in a dataset, while information gain helps choose the best split in a decision tree.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "Entropy is a measure of randomness in data, and information gain is how much structure is introduced after a split, though it is not always relevant.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "Entropy is just a mathematical value used in decision trees, and information gain is not a critical factor.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "Entropy and information gain are not used in decision trees; trees are built randomly.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What is a random forest?",
            "answers": [
                {
                    "text": "A random forest is an ensemble learning method that builds multiple decision trees and aggregates their predictions for improved accuracy and reduced overfitting.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "Random forests use multiple decision trees and combine their outputs to create a more stable model.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "A random forest is just a group of decision trees trained on different subsets of data without any additional benefits.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "A random forest is simply a single decision tree with extra steps.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "Random forests are not useful; a single decision tree is always better.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What is gradient boosting?",
            "answers": [
                {
                    "text": "Gradient boosting is an ensemble technique that builds models sequentially, correcting errors of the previous model using gradient-based optimization.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "Gradient boosting creates a strong predictive model by iteratively refining weak models, usually decision trees.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "Gradient boosting is a way to train multiple models and take the best one, but it is not always effective.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "Gradient boosting is just another name for decision trees and does not offer additional advantages.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "Gradient boosting is not necessary; a single model is sufficient for most tasks.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What is regularization in machine learning?",
            "answers": [
                {
                    "text": "Regularization is a technique used to prevent overfitting by adding a penalty term to the loss function, such as L1 (Lasso) or L2 (Ridge) regularization.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "Regularization helps improve generalization by limiting the complexity of a model using techniques like L1 and L2 norms.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "Regularization is just a way to adjust model weights but does not significantly impact performance.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "Regularization is not needed in machine learning since models can learn everything from data without modification.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "Regularization is unnecessary; increasing data size is a better way to avoid overfitting.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What is an activation function in neural networks?",
            "answers": [
                {
                    "text": "An activation function in neural networks introduces non-linearity into the model, enabling it to learn complex patterns.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "Activation functions help determine whether a neuron should be activated, with examples including ReLU, sigmoid, and tanh.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "Activation functions help in passing data, but their choice does not significantly affect model performance.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "Activation functions are simply mathematical equations that transform input data.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "Activation functions are not needed in neural networks; they are optional.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "Explain the difference between bagging and boosting.",
            "answers": [
                {
                    "text": "Bagging reduces variance by training multiple models independently and averaging results, while boosting reduces bias by sequentially training models to correct previous errors.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "Bagging trains models in parallel to decrease variance, whereas boosting trains models sequentially to improve accuracy.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "Bagging and boosting are both ensemble methods, but boosting focuses more on difficult cases.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "Bagging and boosting are the same, with both using multiple models to improve accuracy.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "There is no significant difference between bagging and boosting; both are just machine learning techniques.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What is dropout in neural networks?",
            "answers": [
                {
                    "text": "Dropout is a regularization technique that randomly deactivates neurons during training to prevent overfitting.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "Dropout helps neural networks generalize better by randomly dropping neurons in training.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "Dropout is a method to delete neurons in a network, though its effect is minimal.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "Dropout is only used to make models train faster, not for regularization.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "Dropout is an unnecessary step in training neural networks and does not impact results.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What is transfer learning?",
            "answers": [
                {
                    "text": "Transfer learning is a technique where a model trained on one task is reused or fine-tuned for a different but related task.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "Transfer learning involves using pre-trained models and adapting them to new datasets with some modifications.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "Transfer learning is about applying knowledge from one problem to another, but it does not always work.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "Transfer learning is a technique where models are trained on different data without any modifications.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "Transfer learning is the process of training a model from scratch every time a new dataset is used.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What are convolutional neural networks (CNNs)?",
            "answers": [
                {
                    "text": "Convolutional Neural Networks (CNNs) are deep learning models designed for image processing tasks, using convolutional layers to detect features.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "CNNs are a type of neural network that processes data in layers and is widely used in image recognition.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "CNNs are deep learning models used mainly for text classification.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "CNNs are neural networks that use standard layers without any special image-processing abilities.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "CNNs are models that randomly classify images without any learned features.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What is reinforcement learning?",
            "answers": [
                {
                    "text": "Reinforcement learning is a type of machine learning where an agent learns to make decisions by receiving rewards or penalties.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "Reinforcement learning uses rewards to guide an agentâ€™s behavior in a given environment.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "Reinforcement learning involves training models with predefined answers and does not require decision-making.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "Reinforcement learning is similar to supervised learning and does not involve rewards.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "Reinforcement learning is just another name for supervised learning.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What is an autoencoder?",
            "answers": [
                {
                    "text": "An autoencoder is a type of neural network used for unsupervised learning, aiming to encode and reconstruct data efficiently.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "Autoencoders learn to compress data into a smaller representation and then reconstruct the original input.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "Autoencoders are models that classify data based on supervised learning.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "Autoencoders are neural networks that do not require any training process.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "Autoencoders are models that generate completely new data instead of reconstructing input.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What is the difference between L1 and L2 regularization?",
            "answers": [
                {
                    "text": "L1 regularization (Lasso) adds absolute values of weights as penalty terms, leading to sparse models, while L2 regularization (Ridge) adds squared weights, preventing large coefficients.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "L1 regularization encourages sparsity by setting some weights to zero, while L2 regularization shrinks weights without eliminating them.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "L1 and L2 regularization both reduce model complexity, but L1 is better for linear regression.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "L1 and L2 regularization serve the same purpose and have no major difference.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "L1 and L2 regularization are completely unrelated concepts in machine learning.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "Explain the difference between an epoch and a batch in deep learning.",
            "answers": [
                {
                    "text": "An epoch refers to one complete pass through the entire training dataset, while a batch is a subset of the dataset used to update model parameters.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "An epoch is when the entire dataset is processed once, whereas a batch is a smaller group of samples used in training iterations.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "An epoch and a batch both involve data processing, but a batch is used multiple times within an epoch.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "An epoch means training a model once, while a batch refers to dividing data into smaller groups.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "An epoch and a batch are the same thing in deep learning.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What is the vanishing gradient problem?",
            "answers": [
                {
                    "text": "The vanishing gradient problem occurs when gradients become very small during backpropagation, making it difficult for deep networks to learn.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "Vanishing gradients happen when deep layers receive very small updates, slowing down learning.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "The vanishing gradient problem is when a model learns slowly due to small weight updates, but it can be solved easily.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "Vanishing gradients mean the model completely stops training, which is not always true.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "The vanishing gradient problem does not affect deep learning models.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What is a learning rate in optimization?",
            "answers": [
                {
                    "text": "The learning rate is a hyperparameter that controls the step size for updating model parameters during training.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "The learning rate determines how quickly a model learns by adjusting weight updates in optimization algorithms.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "The learning rate affects how fast a model converges but does not always determine accuracy.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "A learning rate is just a random number chosen during training.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "There is no such thing as a learning rate in machine learning.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What is word embedding in NLP?",
            "answers": [
                {
                    "text": "Word embedding is a technique that represents words as continuous vectors in a high-dimensional space to capture meaning.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "Word embeddings help NLP models understand relationships between words by mapping them to dense vectors.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "Word embedding involves converting words into numerical values, but there are multiple ways to do so.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "Word embedding is a basic frequency count of words in a dataset.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "Word embedding and one-hot encoding are the same.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What is TF-IDF in NLP?",
            "answers": [
                {
                    "text": "TF-IDF (Term Frequency-Inverse Document Frequency) is a statistical measure that evaluates the importance of a word in a document relative to a collection.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "TF-IDF helps highlight important words in a document by considering their frequency and uniqueness.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "TF-IDF assigns importance scores to words, but it is not always used in NLP.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "TF-IDF is just a method to count words in a text.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "TF-IDF and simple word frequency are the same thing.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "Explain the difference between bag-of-words and word embeddings.",
            "answers": [
                {
                    "text": "Bag-of-words represents text as a collection of word counts without considering context, whereas word embeddings capture semantic relationships between words by mapping them to continuous vector spaces.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "Bag-of-words models text as word frequencies, while word embeddings represent words as dense numerical vectors.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "Bag-of-words and word embeddings are both used in NLP, but word embeddings are better because they use neural networks.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "Bag-of-words and word embeddings are the same, just different ways of representing text.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "Bag-of-words is about using words in a bag, while word embeddings are about embedding words in a sentence.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What is topic modeling in NLP?",
            "answers": [
                {
                    "text": "Topic modeling is an unsupervised learning technique used to discover hidden topics in a collection of documents by analyzing word patterns.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "Topic modeling finds topics in text data using methods like LDA (Latent Dirichlet Allocation) and NMF (Non-negative Matrix Factorization).",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "Topic modeling is a way to classify documents into predefined categories using machine learning.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "Topic modeling is simply extracting the most common words in a document.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "Topic modeling is a technique for generating text from a given topic.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What is k-means clustering?",
            "answers": [
                {
                    "text": "K-means clustering is an unsupervised learning algorithm that partitions data into K clusters based on similarity, minimizing intra-cluster variance.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "K-means clustering is a method that divides data into K groups based on their similarity, using an iterative approach.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "K-means clustering groups data points by choosing random centroids and adjusting them over multiple iterations.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "K-means clustering is a supervised learning algorithm used for classification problems.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "K-means clustering is a way to sort data alphabetically based on keywords.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
    
        {
            "question": "What is the difference between a NumPy array and a Python list?",
            "answers": [
                {
                    "text": "NumPy arrays are faster and support element-wise operations, while Python lists are more flexible and allow heterogeneous data types.",
                    "score": 5,
                    "feedback": "Excellent! Covers speed, memory efficiency, and element-wise operations."
                },
                {
                    "text": "NumPy arrays use less memory and are more efficient for numerical computations than Python lists.",
                    "score": 4,
                    "feedback": "Good! But missing element-wise operations and flexibility."
                },
                {
                    "text": "Both store data, but NumPy is a library while lists are built-in Python data structures.",
                    "score": 3,
                    "feedback": "Partially correct. Needs more details on efficiency differences."
                },
                {
                    "text": "NumPy is just another way to store lists in Python, with some additional functionality.",
                    "score": 1,
                    "feedback": "Misleading. NumPy arrays have fundamental differences in memory management and speed."
                },
                {
                    "text": "No difference, both work the same way.",
                    "score": 0,
                    "feedback": "Incorrect. NumPy arrays are optimized for numerical computations, unlike lists."
                }
            ]
        },
        {
            "question": "What is the purpose of the pandas library in Python?",
            "answers": [
                {
                    "text": "Pandas is used for data manipulation and analysis, providing data structures like DataFrame and Series for handling structured data efficiently.",
                    "score": 5,
                    "feedback": "Perfect! Covers functionality and core structures."
                },
                {
                    "text": "Pandas helps in handling structured and tabular data efficiently using powerful data structures like DataFrame.",
                    "score": 4,
                    "feedback": "Good, but could mention Series and broader data operations."
                },
                {
                    "text": "Pandas is used for handling data, but mainly for reading CSV files and Excel sheets.",
                    "score": 3,
                    "feedback": "Partially correct. Pandas is much more than just a data-loading tool."
                },
                {
                    "text": "Pandas is just a faster version of lists in Python.",
                    "score": 1,
                    "feedback": "Incorrect. Pandas provides structured data handling, which lists do not."
                },
                {
                    "text": "Pandas is not used in data science.",
                    "score": 0,
                    "feedback": "Completely incorrect. Pandas is a fundamental library for data science."
                }
            ]
        },
        {
            "question": "What is the difference between loc and iloc in pandas?",
            "answers": [
                {
                    "text": "loc is label-based indexing, meaning it accesses rows and columns using explicit labels, while iloc is position-based indexing, meaning it selects data based on numerical index positions.",
                    "score": 5,
                    "feedback": "Excellent! Clearly distinguishes between label-based and position-based indexing."
                },
                {
                    "text": "loc selects rows using labels, while iloc selects rows using integer positions.",
                    "score": 4,
                    "feedback": "Good answer! Could include details about accessing both rows and columns."
                },
                {
                    "text": "Both loc and iloc select data in pandas, but loc is generally preferred.",
                    "score": 3,
                    "feedback": "Partially correct. Needs explanation of their fundamental differences."
                },
                {
                    "text": "loc and iloc are used interchangeably in pandas.",
                    "score": 2,
                    "feedback": "Incorrect. loc and iloc have different indexing methods."
                },
                {
                    "text": "No difference between loc and iloc; both are just used for slicing data.",
                    "score": 0,
                    "feedback": "Incorrect. loc is label-based, while iloc is integer-based."
                }
            ]
        },
        {
            "question": "What is the difference between a shallow copy and a deep copy in Python?",
            "answers": [
                {
                    "text": "A shallow copy creates a new object but does not copy nested objects; instead, it references them, while a deep copy creates a new object and recursively copies all nested objects.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity on object referencing."
                },
                {
                    "text": "A shallow copy copies only the top-level structure, while a deep copy duplicates the entire object, including nested structures.",
                    "score": 4,
                    "feedback": "Good! Could mention that shallow copies share references."
                },
                {
                    "text": "A shallow copy creates a new object, but deep copy is just a more detailed copy.",
                    "score": 3,
                    "feedback": "Partially correct. Needs clarity on how nested objects are handled."
                },
                {
                    "text": "Shallow and deep copies are just different ways of duplicating objects.",
                    "score": 2,
                    "feedback": "Misleading. They differ in how they handle object references."
                },
                {
                    "text": "There is no difference between a shallow copy and a deep copy.",
                    "score": 0,
                    "feedback": "Incorrect. They differ in how nested objects are handled."
                }
            ]
        },
        {
            "question": "Explain the use of the groupby function in pandas.",
            "answers": [
                {
                    "text": "The groupby function in pandas is used to group data based on one or more columns and apply aggregate functions like sum, mean, or count to analyze data efficiently.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "The groupby function groups data in a DataFrame based on column values and applies aggregate functions like sum and mean.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "The groupby function allows data grouping and aggregation but does not modify the original DataFrame.",
                    "score": 3,
                    "feedback": "Partially correct, but missing key aspects."
                },
                {
                    "text": "The groupby function is used only for sorting values in a DataFrame.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "The groupby function is used to remove duplicates in pandas.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What are lambda functions in Python?",
            "answers": [
                {
                    "text": "Lambda functions in Python are anonymous, single-expression functions created using the 'lambda' keyword, often used for short, simple operations.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "A lambda function is a small anonymous function in Python that can take multiple arguments but only contains a single expression.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "Lambda functions are a special type of function in Python, but they are not commonly used.",
                    "score": 3,
                    "feedback": "Partially correct, but missing key aspects."
                },
                {
                    "text": "Lambda functions are used for defining loops in Python.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "Lambda functions are the same as regular functions in Python.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What is the purpose of the map, filter, and reduce functions in Python?",
            "answers": [
                {
                    "text": "The map function applies a function to all items in an iterable, filter removes items based on a condition, and reduce aggregates elements using a function.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "Map applies a function to elements in an iterable, filter removes elements that donâ€™t satisfy a condition, and reduce combines elements.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "Map, filter, and reduce are used for processing lists, but they do the same thing.",
                    "score": 3,
                    "feedback": "Partially correct, but missing key aspects."
                },
                {
                    "text": "Map and filter are used for iteration, but reduce is unrelated.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "Map, filter, and reduce are used for sorting lists in Python.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What is the difference between *args and **kwargs in Python functions?",
            "answers": [
                {
                    "text": "*args allows a function to accept a variable number of positional arguments as a tuple, while **kwargs allows a function to accept a variable number of keyword arguments as a dictionary.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "*args is used for passing multiple positional arguments, while **kwargs is used for passing multiple keyword arguments.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "*args and **kwargs are both used for function arguments, but **kwargs is more flexible.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "*args and **kwargs do the same thing in Python functions.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "*args is a Python module, and **kwargs is a built-in function.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What is a Python decorator?",
            "answers": [
                {
                    "text": "A Python decorator is a function that takes another function as input and extends its behavior without modifying its code. It is often used for logging, authentication, and timing functions.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "A decorator is a function that modifies the behavior of another function without changing its source code.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "A decorator is used in Python to wrap a function, but it is not essential for coding.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "A decorator is just another name for a Python function.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "A decorator is a built-in Python module for handling files.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "How do you handle missing values in a pandas DataFrame?",
            "answers": [
                {
                    "text": "Missing values in a pandas DataFrame can be handled using methods like dropna() to remove them, fillna() to replace them with a specified value, or interpolate() to estimate missing values.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "You can use dropna() to remove missing values and fillna() to replace them.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "Missing values in pandas can be handled by deleting them, but replacing them is not possible.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "Missing values in pandas are ignored automatically by the library.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "Pandas does not support handling missing values.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What is vectorization in NumPy?",
            "answers": [
                {
                    "text": "Vectorization in NumPy refers to performing operations on entire arrays without using explicit loops, utilizing NumPy's optimized C-based functions for faster computation.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "Vectorization allows operations to be applied to entire arrays without loops, improving efficiency in NumPy.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "Vectorization is a method to speed up computations, but loops can sometimes be just as fast.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "Vectorization is just another term for using loops efficiently in NumPy.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "Vectorization has no impact on performance and is not needed in NumPy.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What is broadcasting in NumPy?",
            "answers": [
                {
                    "text": "Broadcasting in NumPy allows arrays of different shapes to be used together in arithmetic operations by expanding the smaller array to match the larger arrayâ€™s shape.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "Broadcasting enables operations between arrays of different shapes by automatically expanding smaller arrays.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "Broadcasting is a way to make array operations easier, but it does not always work automatically.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "Broadcasting means making copies of smaller arrays to match larger arrays.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "Broadcasting is just another name for reshaping arrays.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "How does the apply() function work in pandas?",
            "answers": [
                {
                    "text": "The apply() function in pandas allows applying a function along the axis of a DataFrame or Series, enabling efficient transformations without explicit loops.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "The apply() function applies a given function to each row or column in a DataFrame.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "apply() is a function that modifies DataFrame values, but it's not useful for large datasets.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "apply() is used to join two DataFrames together.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "apply() is only used for filtering rows in a DataFrame.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What are the differences between a dictionary and a DataFrame in Python?",
            "answers": [
                {
                    "text": "A dictionary in Python is a key-value data structure, while a pandas DataFrame is a tabular data structure that can hold multiple columns and supports indexing and data manipulation.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "A dictionary stores key-value pairs, whereas a DataFrame is a structured data table with labeled rows and columns.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "A dictionary and DataFrame are similar, but dictionaries cannot hold multiple columns of data.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "Dictionaries and DataFrames are identical but used in different libraries.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "There is no difference between a dictionary and a DataFrame; both store data in the same way.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What is a Python generator?",
            "answers": [
                {
                    "text": "A generator in Python is a function that yields values lazily using the 'yield' keyword, allowing efficient iteration without storing all values in memory.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "A generator is a special function in Python that returns values using 'yield' instead of 'return'.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "A generator is similar to a function but can produce multiple outputs over time.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "Generators are used to store large amounts of data in lists.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "Generators are just another name for functions in Python.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What is the difference between is and == in Python?",
            "answers": [
                {
                    "text": "The '==' operator checks if the values of two variables are equal, whereas 'is' checks if the two variables point to the same memory location.",
                    "score": 5,
                    "feedback": "Excellent! Clearly explains the difference between identity and equality."
                },
                {
                    "text": "'==' compares the values of objects, while 'is' checks if they refer to the same object in memory.",
                    "score": 4,
                    "feedback": "Good answer! Could be slightly more detailed."
                },
                {
                    "text": "'is' and '==' are both used for comparison, but 'is' is for memory reference.",
                    "score": 3,
                    "feedback": "Partially correct. Needs more clarity on usage."
                },
                {
                    "text": "'is' and '==' are interchangeable in Python.",
                    "score": 2,
                    "feedback": "Incorrect. 'is' checks identity, while '==' checks values."
                },
                {
                    "text": "'is' and '==' perform the exact same function.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "Explain the difference between list comprehension and a for loop.",
            "answers": [
                {
                    "text": "List comprehension provides a concise way to create lists using a single line of code, whereas a for loop requires multiple lines.",
                    "score": 5,
                    "feedback": "Excellent! Clearly explains the efficiency of list comprehensions."
                },
                {
                    "text": "List comprehension is a shorthand for creating lists, while for loops require more code.",
                    "score": 4,
                    "feedback": "Good answer! Could mention performance benefits."
                },
                {
                    "text": "Both are used to create lists, but list comprehension is shorter.",
                    "score": 3,
                    "feedback": "Partially correct. Needs explanation of performance benefits."
                },
                {
                    "text": "List comprehension and for loops are the same in functionality and speed.",
                    "score": 2,
                    "feedback": "Incorrect. List comprehensions are generally faster."
                },
                {
                    "text": "List comprehensions are unnecessary because for loops do the same thing.",
                    "score": 0,
                    "feedback": "Incorrect. List comprehensions offer efficiency and readability."
                }
            ]
        },
        {
            "question": "What is the difference between a set and a list in Python?",
            "answers": [
                {
                    "text": "A list is an ordered collection that allows duplicate values, whereas a set is an unordered collection that only allows unique values.",
                    "score": 5,
                    "feedback": "Excellent! Covers ordering and uniqueness."
                },
                {
                    "text": "Lists allow duplicates and maintain order, while sets are unordered and only have unique values.",
                    "score": 4,
                    "feedback": "Good answer! Could expand on performance differences."
                },
                {
                    "text": "Lists store values in order, while sets store them randomly.",
                    "score": 3,
                    "feedback": "Partially correct. Needs mention of uniqueness."
                },
                {
                    "text": "Sets and lists are the same, except sets use curly brackets.",
                    "score": 2,
                    "feedback": "Incorrect. Sets are unordered and only store unique values."
                },
                {
                    "text": "There is no difference between sets and lists in Python.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What are the advantages of using NumPy over regular Python lists?",
            "answers": [
                {
                    "text": "NumPy arrays are faster, more memory-efficient, and support vectorized operations, making them better for numerical computations.",
                    "score": 5,
                    "feedback": "Excellent! Covers speed, efficiency, and vectorized operations."
                },
                {
                    "text": "NumPy arrays are optimized for mathematical operations and use less memory than lists.",
                    "score": 4,
                    "feedback": "Good answer! Could mention vectorization benefits."
                },
                {
                    "text": "NumPy is useful for handling numbers, while lists store any type of data.",
                    "score": 3,
                    "feedback": "Partially correct. Needs mention of speed and efficiency."
                },
                {
                    "text": "NumPy is just a library that provides additional functions for lists.",
                    "score": 2,
                    "feedback": "Incorrect. NumPy arrays are fundamentally different from lists."
                },
                {
                    "text": "There is no real advantage to using NumPy over lists.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What is the difference between merge() and join() in pandas?",
            "answers": [
                {
                    "text": "merge() is used for combining DataFrames based on common columns or indices, whereas join() is mainly used for joining DataFrames based on their index.",
                    "score": 5,
                    "feedback": "Excellent! Covers key differences in functionality."
                },
                {
                    "text": "merge() allows column-based merging, while join() merges on the index by default.",
                    "score": 4,
                    "feedback": "Good answer! Could elaborate on use cases."
                },
                {
                    "text": "merge() and join() both combine DataFrames, but join() works best for index-based merging.",
                    "score": 3,
                    "feedback": "Partially correct. Needs explanation of default behaviors."
                },
                {
                    "text": "merge() and join() are the same functions with different names.",
                    "score": 2,
                    "feedback": "Incorrect. They have distinct behaviors."
                },
                {
                    "text": "There is no difference between merge() and join() in pandas.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What is an exception in Python and how is it handled?",
            "answers": [
                {
                    "text": "An exception in Python is an error that occurs during program execution, disrupting the normal flow of instructions. It is handled using try-except blocks, where the code in the 'try' block is executed, and if an exception occurs, it is caught by the 'except' block to handle the error gracefully.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "An exception is an error that occurs during program execution. Python provides try-except blocks to handle exceptions and prevent crashes.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "Exceptions are errors in Python that can be handled using try-except, but they do not always stop the program.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "Exceptions are syntax errors that occur in Python.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "There is no such thing as exceptions in Python.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What is the purpose of the with statement in Python?",
            "answers": [
                {
                    "text": "The 'with' statement in Python is used for resource management, ensuring that resources like file objects or database connections are properly released after use. It automatically handles closing files or releasing resources, reducing the chances of resource leaks.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "The 'with' statement is used to handle resources efficiently, such as opening files without needing to explicitly close them.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "The 'with' statement is used only when working with files.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "The 'with' statement is used to create loops in Python.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "The 'with' statement has no special purpose in Python.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "What are pickling and unpickling in Python?",
            "answers": [
                {
                    "text": "Pickling is the process of converting a Python object into a byte stream using the pickle module, allowing it to be stored or transmitted. Unpickling is the reverse process, where the byte stream is converted back into a Python object.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "Pickling saves Python objects as byte streams, and unpickling restores them.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "Pickling is storing Python data, and unpickling is retrieving it, but it is not widely used.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "Pickling is a method for encrypting Python files.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "Pickling and unpickling have nothing to do with Python data storage.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
        {
            "question": "How do you read a CSV file using pandas?",
            "answers": [
                {
                    "text": "A CSV file can be read in pandas using the read_csv() function. For example: import pandas as pd; df = pd.read_csv('file.csv'). This reads the CSV file into a DataFrame, allowing for data manipulation.",
                    "score": 5,
                    "feedback": "Excellent! Well-explained with clarity."
                },
                {
                    "text": "The read_csv() function in pandas is used to read CSV files into DataFrames.",
                    "score": 4,
                    "feedback": "Good answer! Some details could be expanded upon."
                },
                {
                    "text": "CSV files can be opened in pandas, but they require extra steps to process.",
                    "score": 3,
                    "feedback": "Partially correct, but missing some key aspects."
                },
                {
                    "text": "Pandas cannot read CSV files directly.",
                    "score": 2,
                    "feedback": "Needs improvement. Consider covering the concept more clearly."
                },
                {
                    "text": "CSV files cannot be used in Python.",
                    "score": 0,
                    "feedback": "Incorrect. Please review the concept carefully."
                }
            ]
        },
      {
                "question": "What is the difference between append() and extend() for lists in Python?",
                "answers": [
                    {
                        "text": "append() adds a single element to the end of the list, while extend() merges another iterableâ€™s elements into the list.",
                        "score": 5,
                        "feedback": "Excellent! Clearly explains the difference between append() and extend()."
                    },
                    {
                        "text": "append() inserts an object at the end of a list, while extend() adds multiple elements from another iterable.",
                        "score": 4,
                        "feedback": "Good! Could mention that extend() flattens iterables."
                    },
                    {
                        "text": "append() and extend() both add elements to a list, but extend() works better for lists.",
                        "score": 3,
                        "feedback": "Partially correct. Needs a clearer distinction between the two methods."
                    },
                    {
                        "text": "append() and extend() do the same thing but in different ways.",
                        "score": 2,
                        "feedback": "Too vague. Needs clarification on how they behave differently."
                    },
                    {
                        "text": "There is no difference between append() and extend().",
                        "score": 0,
                        "feedback": "Incorrect. append() and extend() function differently in Python."
                    }
                ]
            },
            {
                "question": "What is a Python virtual environment and why is it useful?",
                "answers": [
                    {
                        "text": "A Python virtual environment is an isolated workspace that allows different projects to have their own dependencies, preventing conflicts.",
                        "score": 5,
                        "feedback": "Excellent! Covers isolation and dependency management."
                    },
                    {
                        "text": "A virtual environment in Python helps manage dependencies for projects separately.",
                        "score": 4,
                        "feedback": "Good! Could mention how it prevents package conflicts."
                    },
                    {
                        "text": "A virtual environment is a separate Python installation.",
                        "score": 3,
                        "feedback": "Partially correct. It is not a full installation but an isolated workspace."
                    },
                    {
                        "text": "A virtual environment is just another name for a Python project folder.",
                        "score": 2,
                        "feedback": "Incorrect. Virtual environments isolate dependencies, unlike simple folders."
                    },
                    {
                        "text": "Virtual environments are unnecessary in Python.",
                        "score": 0,
                        "feedback": "Incorrect. They are crucial for managing dependencies."
                    }
                ]
            },
            {
                "question": "What is the difference between range() and xrange() in Python?",
                "answers": [
                    {
                        "text": "range() returns a list in Python 2 and a generator in Python 3, while xrange() is used in Python 2 and returns a generator-like object.",
                        "score": 5,
                        "feedback": "Excellent! Clearly distinguishes between range() and xrange()."
                    },
                    {
                        "text": "range() produces a list in Python 2, while xrange() generates numbers on demand to save memory.",
                        "score": 4,
                        "feedback": "Good! Could mention that xrange() is removed in Python 3."
                    },
                    {
                        "text": "range() and xrange() both generate sequences, but xrange() is faster.",
                        "score": 3,
                        "feedback": "Partially correct. xrange() is more memory-efficient, not necessarily faster."
                    },
                    {
                        "text": "range() and xrange() are identical in all Python versions.",
                        "score": 2,
                        "feedback": "Incorrect. They behave differently, especially in Python 2."
                    },
                    {
                        "text": "There is no difference between range() and xrange().",
                        "score": 0,
                        "feedback": "Incorrect. xrange() is only available in Python 2."
                    }
                ]
            },
            {
                "question": "What is the difference between a module and a package in Python?",
                "answers": [
                    {
                        "text": "A module is a single Python file containing code, while a package is a collection of modules organized in a directory with an __init__.py file.",
                        "score": 5,
                        "feedback": "Excellent! Covers the key distinction between modules and packages."
                    },
                    {
                        "text": "A module is a file with Python code, while a package is a folder containing multiple modules.",
                        "score": 4,
                        "feedback": "Good! Could mention the role of __init__.py."
                    },
                    {
                        "text": "A package is just a bigger module.",
                        "score": 3,
                        "feedback": "Partially correct. Needs to explain structural differences."
                    },
                    {
                        "text": "Modules and packages are interchangeable in Python.",
                        "score": 2,
                        "feedback": "Incorrect. Packages contain modules, but modules are standalone files."
                    },
                    {
                        "text": "There is no difference between a module and a package.",
                        "score": 0,
                        "feedback": "Incorrect. Modules are single files; packages are collections of modules."
                    }
                ]
            },
            {
                "question": "What is the difference between a compiled language and an interpreted language?",
                "answers": [
                    {
                        "text": "A compiled language translates the entire source code into machine code before execution, whereas an interpreted language executes code line-by-line at runtime.",
                        "score": 5,
                        "feedback": "Excellent! Clearly explains both compiled and interpreted languages."
                    },
                    {
                        "text": "Compiled languages convert source code into machine code before execution, while interpreted languages execute code directly.",
                        "score": 4,
                        "feedback": "Good! Could mention efficiency differences."
                    },
                    {
                        "text": "Compiled languages run faster than interpreted ones because they are converted before execution.",
                        "score": 3,
                        "feedback": "Partially correct. Needs explanation of compilation vs. interpretation."
                    },
                    {
                        "text": "Compiled and interpreted languages work the same way.",
                        "score": 2,
                        "feedback": "Incorrect. They have fundamental execution differences."
                    },
                    {
                        "text": "There is no difference between compiled and interpreted languages.",
                        "score": 0,
                        "feedback": "Incorrect. Compilation and interpretation are distinct approaches."
                    }
                ]
            },
            {
                "question": "How do you remove duplicate values from a pandas DataFrame?",
                "answers": [
                    {
                        "text": "To remove duplicate values from a pandas DataFrame, use the `drop_duplicates()` method. It removes duplicate rows based on all columns by default. You can specify particular columns using the `subset` parameter and decide whether to keep the first, last, or none of the duplicates using the `keep` parameter.",
                        "score": 5,
                        "feedback": "Excellent! Well-explained with clarity."
                    },
                    {
                        "text": "Duplicates in a DataFrame can be removed using `drop_duplicates()`, which removes repeated rows. You can also specify which columns to check using `subset`.",
                        "score": 4,
                        "feedback": "Good answer! Some details could be expanded upon."
                    },
                    {
                        "text": "Use `drop_duplicates()` to remove duplicate rows, but it may not work well for all cases.",
                        "score": 3,
                        "feedback": "Partially correct, but missing some key aspects."
                    },
                    {
                        "text": "Removing duplicates requires filtering rows manually.",
                        "score": 2,
                        "feedback": "Needs improvement. Consider covering the concept more clearly."
                    },
                    {
                        "text": "Duplicates cannot be removed from a DataFrame.",
                        "score": 0,
                        "feedback": "Incorrect. Please review the concept carefully."
                    }
                ]
            },
            {
                "question": "What is one-hot encoding and why is it used in machine learning?",
                "answers": [
                    {
                        "text": "One-hot encoding is a technique used to represent categorical variables as binary vectors. Each category is converted into a separate column with values of 0s and 1s. It is used in machine learning to enable algorithms to process categorical data numerically.",
                        "score": 5,
                        "feedback": "Excellent! Well-explained with clarity."
                    },
                    {
                        "text": "One-hot encoding converts categorical data into binary values using separate columns for each category.",
                        "score": 4,
                        "feedback": "Good answer! Some details could be expanded upon."
                    },
                    {
                        "text": "One-hot encoding helps represent text-based categories as numbers for machine learning models.",
                        "score": 3,
                        "feedback": "Partially correct, but missing some key aspects."
                    },
                    {
                        "text": "One-hot encoding replaces text values with numbers directly.",
                        "score": 2,
                        "feedback": "Needs improvement. Consider covering the concept more clearly."
                    },
                    {
                        "text": "One-hot encoding is not used in machine learning.",
                        "score": 0,
                        "feedback": "Incorrect. Please review the concept carefully."
                    }
                ]
            },
            {
                "question": "What is the purpose of the itertools module in Python?",
                "answers": [
                    {
                        "text": "The `itertools` module in Python provides functions for creating iterators that help with efficient looping, such as `combinations()`, `permutations()`, `cycle()`, and `repeat()`. It is useful for handling large datasets and performing complex iterations in a memory-efficient way.",
                        "score": 5,
                        "feedback": "Excellent! Well-explained with clarity."
                    },
                    {
                        "text": "`itertools` provides tools for efficient iteration, including functions for combinations, permutations, and infinite loops.",
                        "score": 4,
                        "feedback": "Good answer! Some details could be expanded upon."
                    },
                    {
                        "text": "`itertools` is a library for handling loops in Python.",
                        "score": 3,
                        "feedback": "Partially correct, but missing some key aspects."
                    },
                    {
                        "text": "`itertools` is used only for sorting lists.",
                        "score": 2,
                        "feedback": "Needs improvement. Consider covering the concept more clearly."
                    },
                    {
                        "text": "`itertools` is not an important module in Python.",
                        "score": 0,
                        "feedback": "Incorrect. Please review the concept carefully."
                    }
                ]
            },
            {
                "question": "How can you improve the performance of a Python script?",
                "answers": [
                    {
                        "text": "To improve Python script performance, you can use efficient data structures, optimize loops with list comprehensions, use built-in functions, avoid unnecessary computations, leverage multiprocessing/threading for parallel execution, and use libraries like NumPy for numerical operations.",
                        "score": 5,
                        "feedback": "Excellent! Well-explained with clarity."
                    },
                    {
                        "text": "Performance can be improved by using efficient loops, built-in functions, and parallel computing techniques.",
                        "score": 4,
                        "feedback": "Good answer! Some details could be expanded upon."
                    },
                    {
                        "text": "Optimizing loops and reducing unnecessary calculations can improve performance.",
                        "score": 3,
                        "feedback": "Partially correct, but missing some key aspects."
                    },
                    {
                        "text": "Adding more print statements helps with performance improvement.",
                        "score": 2,
                        "feedback": "Needs improvement. Consider covering the concept more clearly."
                    },
                    {
                        "text": "Performance optimization is not necessary in Python.",
                        "score": 0,
                        "feedback": "Incorrect. Please review the concept carefully."
                    }
                ]
            },

            {
                "question": " What is the purpose of the __init__ method in Python classes?",
                "answers": [
                   
                    {
                        "text": "    It is the constructor in Python, used to assign values to object properties.",
                        "score": 4,
                        "feedback": "Good, but could mention instance variables explicitly."
                    },
                    {
                        "text": "  __init__ is a special method that runs automatically when an object is created.",
                        "score": 3,
                        "feedback": "Correct, but lacks explanation of initialization."
                    },
                    {
                        "text": "  It is a function in Python classes.",
                        "score": 1,
                        "feedback": "Too generic. Needs to explain its purpose in object creation."
                    }
                ]
            },
            {
                "question": "  Explain the concept of inheritance in Object-Oriented Programming.",
                "answers": [
                    {
                        "text": "Inheritance is a mechanism that allows a class to inherit properties and behaviors from another class.",
                        "score": 5,
                        "feedback": "Excellent. Covers all key points of inheritance."
                    },
                    {
                        "text": "A child class can use the functions and variables of a parent class.",
                        "score": 4,
                        "feedback": "Correct but could explain why inheritance is useful."
                    },
                    {
                        "text": "It is when an object inherits characteristics from another object.",
                        "score": 2,
                        "feedback": "Confusing explanation. Needs to mention classes."
                    },
                    {
                        "text": "  Inheritance is not used in Python.",
                        "score": 0,
                        "feedback": "Incorrect. Python supports multiple types of inheritance."
                    }
                ]
            },
            {
                "question": "  What is polymorphism in OOP?",
                "answers": [
                    {
                        "text": "Polymorphism is a feature of object-oriented programming languages that allows a specific routine to use variables of different types at different times.",
                        "score": 5,
                        "feedback": "Excellent. Explains behavior-based differences."
                    },
                    {
                        "text": " Polymorphism allows using a single interface for diverse object behaviors, often through method overriding or overloading.",
                        "score": 4,
                        "feedback": "Correct but could be more specific."
                    },
                    {
                        "text": "  Polymorphism allows functions with the same name to be reused.",
                        "score": 3,
                        "feedback": "Not entirely wrong, but needs details on object-oriented use."
                    },
                    {
                        "text": " It is when two classes inherit the same property.",
                        "score": 1,
                        "feedback": "Incorrect definition, confusing with inheritance."
                    },
                    {
                        "text": " Polymorphism is not suppoerted in Python.",
                        "score": 0,
                        "feedback": "Wrong. Python supports polymorphism."
                    }
                ]
            },
            {
                "question": "Explain shallow copy.",
                "answers": [
                    {
                        "text": "A shallow copy creates a new object but references the original elements.  Changes to the elements of the copy affect the original, but changes to the copy's structure do not.",
                        "score": 5,
                        "feedback": "Excellent, captures both key differences."
                    },
                    {
                        "text": "  Shallow copy creates a new object and its elements are references to the original object's elements.",
                        "score": 4,
                        "feedback": "Good but lacks explanation on object creation."
                    },
                    {
                        "text": "A shallow copy makes a copy of an object, but the copy still points to the same memory locations as the original",
                        "score": 3,
                        "feedback": " While related to memory, it's more accurate to say it references the same elements within the object, not necessarily the same memory location for the overall object itself."
                    },
                    {
                        "text": " A shallow copy is a way to copy an object, but it's different from a deep copy.",
                        "score": 1,
                        "feedback": "Minimal information, explain how it is different or what a shallow copy actually does."
                    },
                    {
                        "text": " A shallow copy is a type of copy.",
                        "score": 0,
                        "feedback": " Student does not demonstrate any understanding of the concept."
                    }
                ]
            },
            {
                "question": "What is 'self' in Python?",
                "answers": [
                  {
                    "text": "'self' refers to the instance of the class when a method is called.",
                    "score": 5,
                    "feedback": "Excellent. Concise and accurate."
                  },
                  {
                    "text": "'self' is the first argument in instance methods, representing the instance itself.",
                    "score": 4,
                    "feedback": "Good. Explains its role as an argument."
                  },
                  {
                    "text": "'self' is used to access instance variables and methods within a class.",
                    "score": 3,
                    "feedback": "Partially correct, focuses on usage but not its core purpose."
                  },
                  {
                    "text": "'self' allows a method to refer to the current object.",
                    "score": 2,
                    "feedback": "Vague. Needs more detail about what 'the current object' means."
                  },
                  {
                    "text": "'self' is a convention for the first argument in instance methods.",
                    "score": 1,
                    "feedback": "Minimally correct. Doesn't explain *why* it's used."
                  },
                  {
                    "text": "'self' is not required in Python classes.",
                    "score": 0,
                    "feedback": "Incorrect. It is required for instance methods."
                  }
                ]
              },
              {
                "question": "Explain encapsulation in OOP.",
                "answers": [
                  {
                    "text": "Encapsulation bundles data and methods that operate on that data, restricting direct access and promoting data integrity.",
                    "score": 5,
                    "feedback": "Excellent. Concise and complete definition."
                  },
                  {
                    "text": "Encapsulation hides data and implementation details, exposing only a controlled interface.",
                    "score": 4,
                    "feedback": "Good. Covers hiding and controlled access."
                  },
                  {
                    "text": "Encapsulation protects data by making it private and providing getter/setter methods.",
                    "score": 3,
                    "feedback": "Partially correct, focuses on implementation (getters/setters) rather than the core concept."
                  },
                  {
                    "text": "Encapsulation is when a class contains both data and methods.",
                    "score": 2,
                    "feedback": "Superficial.  Doesn't explain the purpose of bundling."
                  },
                  {
                    "text": "Encapsulation is related to inheritance.",
                    "score": 1,
                    "feedback": "Incorrect. Encapsulation is distinct from inheritance."
                  },
                  {
                    "text": "Encapsulation is not used in OOP.",
                    "score": 0,
                    "feedback": "Incorrect. Encapsulation is a core OOP principle."
                  }
                ]
              },
              {
                "question": "Explain method overloading.",
                "answers": [
                  {
                    "text": "Method overloading allows defining multiple methods with the same name but different parameter lists within the same class.",
                    "score": 5,
                    "feedback": "Excellent. Clear and complete."
                  },
                  {
                    "text": "Method overloading enables using the same method name with varying numbers or types of arguments.",
                    "score": 4,
                    "feedback": "Good. Covers the key aspects of parameter differences."
                  },
                  {
                    "text": "Method overloading means having multiple methods with the same name.",
                    "score": 3,
                    "feedback": "Partially correct, but needs to mention parameter differences."
                  },
                  {
                    "text": "Method overloading is when a class inherits multiple methods.",
                    "score": 2,
                    "feedback": "Incorrect. This is related to inheritance, not overloading."
                  },
                  {
                    "text": "Method overloading is the same as method overriding.",
                    "score": 1,
                    "feedback": "Incorrect. These are distinct concepts."
                  },
                  {
                    "text": "Method overloading is not supported in Python.",
                    "score": 0,
                    "feedback": "Incorrect. While Python handles it differently than some languages, the concept exists."
                  }
                ]
              },
              {
                "question": "What is a lambda function in Python?",
                "answers": [
                  {
                    "text": "A lambda function is an anonymous, small, inline function defined using the `lambda` keyword.",
                    "score": 5,
                    "feedback": "Excellent. Covers anonymity, size, and syntax."
                  },
                  {
                    "text": "A lambda function is a nameless function used for short, simple operations.",
                    "score": 4,
                    "feedback": "Good. Explains the purpose and anonymity."
                  },
                  {
                    "text": "A lambda function is a way to create functions in Python.",
                    "score": 3,
                    "feedback": "Partially correct, but lacks detail on anonymity and typical usage."
                  },
                  {
                    "text": "A lambda function is the same as a regular function.",
                    "score": 2,
                    "feedback": "Incorrect. Lambda functions are anonymous and have limitations."
                  },
                  {
                    "text": "A lambda function is a type of loop in Python.",
                    "score": 1,
                    "feedback": "Incorrect. Lambda functions are not related to loops."
                  },
                  {
                    "text": "Lambda functions are not used in Python.",
                    "score": 0,
                    "feedback": "Incorrect. Lambda functions are a feature of Python."
                  }
                ]
              },
              {
                "question": "What is the difference between 'is' and '==' operators in Python?",
                "answers": [
                  {
                    "text": "'is' checks object identity (same memory location), '==' checks value equality.",
                    "score": 5,
                    "feedback": "Excellent. Concise and complete."
                  },
                  {
                    "text": "'is' compares object identity, '==' compares object values.",
                    "score": 4,
                    "feedback": "Good. Clearly distinguishes the two."
                  },
                  {
                    "text": "Both 'is' and '==' are used for comparison in Python.",
                    "score": 3,
                    "feedback": "Partially correct, but lacks the key difference."
                  },
                  {
                    "text": "'is' and '==' do the same thing.",
                    "score": 1,
                    "feedback": "Incorrect. They have distinct purposes."
                  },
                  {
                    "text": "'is' is not a Python operator.",
                    "score": 0,
                    "feedback": "Incorrect. 'is' is an identity operator."
                  }
                ]
              },
              {
                "question": "What is multiple inheritance in Python?",
                "answers": [
                  {
                    "text": "Multiple inheritance allows a class to inherit from multiple parent classes.",
                    "score": 5,
                    "feedback": "Excellent. Clear and concise."
                  },
                  {
                    "text": "A class can inherit from several parent classes in multiple inheritance.",
                    "score": 4,
                    "feedback": "Good. Expresses the core concept."
                  },
                  {
                    "text": "Multiple inheritance involves two classes sharing the same parent.",
                    "score": 3,
                    "feedback": "Partially correct, but describes a different relationship."
                  },
                  {
                    "text": "Multiple inheritance is when a parent class has multiple children.",
                    "score": 2,
                    "feedback": "Incorrect. This is hierarchical inheritance."
                  },
                  {
                    "text": "Multiple inheritance is not supported in Python.",
                    "score": 0,
                    "feedback": "Incorrect. Python supports multiple inheritance."
                  }
                ]
              },
              {
                "question": "What is a decorator in Python?",
                "answers": [
                  {
                    "text": "A decorator is a function that modifies or enhances another function's behavior.",
                    "score": 5,
                    "feedback": "Excellent. Captures the essence of modification."
                  },
                  {
                    "text": "Decorators wrap a function to add functionality without changing its core definition.",
                    "score": 4,
                    "feedback": "Good. Explains the wrapping concept."
                  },
                  {
                    "text": "A decorator is a function that calls another function.",
                    "score": 3,
                    "feedback": "Partially correct, but doesn't explain the modification aspect."
                  },
                  {
                    "text": "Decorators are used for looping in Python.",
                    "score": 1,
                    "feedback": "Incorrect. Decorators are not related to loops."
                  },
                  {
                    "text": "Decorators are not a feature of Python.",
                    "score": 0,
                    "feedback": "Incorrect. Python supports decorators."
                  }
                ]
              },
              {
                "question": "  What is the difference between break and continue in Python?",
                "answers": [
                    {
                        "text": "  'break' exits the loop completely, while 'continue' skips the current iteration and moves to the next.",
                        "score": 5,
                        "feedback": "Excellent! Clearly explains both keywords."
                    },
                    {
                        "text": "  'break' stops a loop, 'continue' moves to the next loop cycle.",
                        "score": 4,
                        "feedback": "Good answer, but could be slightly more precise."
                    },
                    {
                        "text": "  'break' and 'continue' exit a loop.",
                        "score": 2,
                        "feedback": "Incorrect. 'continue' does not exit the loop."
                    },
                    {
                        "text": "  'break' and 'continue' are the same thing.",
                        "score": 0,
                        "feedback": "Incorrect. They serve different purposes."
                    }
                ]
            },
            {
                "question": "Differentiate shallow copy and deep copy.",
                "answers": [
                  {
                    "text": "Shallow copy creates a new object, but references the original's elements, while deep copy creates a new object with independent copies of the original's elements.",
                    "score": 5,
                    "feedback": "Excellent. Clearly differentiates the behavior and object creation."
                  },
                  {
                    "text": "Shallow copy shares references to the original's elements, deep copy creates new, independent copies of the elements.",
                    "score": 4,
                    "feedback": "Good. Concisely explains the core difference."
                  },
                  {
                    "text": "Shallow copy duplicates an object, deep copy does not.",
                    "score": 3,
                    "feedback": "Incorrect. Deep copy creates a duplicate, not shallow copy."
                  },
                  {
                    "text": "Both do the same thing.",
                    "score": 1,
                    "feedback": "Incorrect. They have distinct behaviors."
                  },
                  {
                    "text": " ",
                    "score": 0,
                    "feedback": "No answer provided."
                  }
                ]
              },
              {
                "question": "What are Python's key data types?",
                "answers": [
                  {
                    "text": "Python's key data types are: integers (int), floating-point numbers (float), strings (str), booleans (bool), lists (list), tuples (tuple), dictionaries (dict), and sets (set).",
                    "score": 5,
                    "feedback": "Excellent. Comprehensive and accurate."
                  },
                  {
                    "text": "Python has integers, floats, strings, booleans, lists, tuples, and dictionaries as its main data types.",
                    "score": 4,
                    "feedback": "Good. Covers most of the key types."
                  },
                  {
                    "text": "Python has numeric and text data types.",
                    "score": 2,
                    "feedback": "Too vague. Needs to list specific data types."
                  },
                  {
                    "text": "There are no data types in Python.",
                    "score": 0,
                    "feedback": "Incorrect. Python has various data types."
                  }
                ]
              },
              {
                "question": "  What is cross-validation in machine learning?",
                "answers": [
                    {
                        "text": "  Cross-validation is a technique for assessing how a model will generalize to an independent dataset by partitioning data into training and validation sets multiple times.",
                        "score": 5,
                        "feedback": "Excellent! Well-explained with clarity."
                    },
                    {
                        "text": "  Cross-validation is a method used to test machine learning models by splitting data into different subsets, ensuring better generalization.",
                        "score": 4,
                        "feedback": "Good answer! Some details could be expanded upon."
                    },
                    {
                        "text": "  Cross-validation is a technique that involves splitting the dataset into different training and test sets, but it is not always needed for model evaluation.",
                        "score": 3,
                        "feedback": "Partially correct, but missing some key aspects."
                    },
                    {
                        "text": "  Cross-validation is a method that helps test models, but it does not significantly affect their accuracy.",
                        "score": 2,
                        "feedback": "Needs improvement. Consider covering the concept more clearly."
                    },
                    {
                        "text": "  Cross-validation is just a way of dividing random data without any structured approach.",
                        "score": 0,
                        "feedback": "Incorrect. Please review the concept carefully."
                    }
                ]
            },
            {
                "question": "Explain the concept of overfitting in machine learning.",
                "answers": [
                  {
                    "text": "Overfitting occurs when a model learns the training data too well, including noise, leading to poor performance on unseen data.",
                    "score": 5,
                    "feedback": "Excellent. Clear and concise."
                  },
                  {
                    "text": "Overfitting is when a model is too complex and fits the training data perfectly, but fails to generalize to new data.",
                    "score": 4,
                    "feedback": "Good. Captures the core idea of poor generalization."
                  },
                  {
                    "text": "Overfitting happens when a model has too many parameters and memorizes the training data.",
                    "score": 3,
                    "feedback": "Partially correct, but doesn't fully explain the consequences."
                  },
                  {
                    "text": "Overfitting is when a model memorizes data instead of learning patterns.",
                    "score": 2,
                    "feedback": "Needs more detail about the impact on unseen data."
                  },
                  {
                    "text": "Overfitting has no negative impact on models.",
                    "score": 0,
                    "feedback": "Incorrect. Overfitting is a significant problem."
                  }
                ]
              },
              {
                "question": "What is the difference between parametric and non-parametric models?",
                "answers": [
                  {
                    "text": "Parametric models assume a fixed number of parameters, while non-parametric models' parameters grow with the data.",
                    "score": 5,
                    "feedback": "Excellent. Concise and accurate."
                  },
                  {
                    "text": "Parametric models have predefined assumptions about the data, non-parametric models are more flexible.",
                    "score": 4,
                    "feedback": "Good. Highlights the difference in assumptions."
                  },
                  {
                    "text": "Parametric models use equations, non-parametric models don't.",
                    "score": 3,
                    "feedback": "Partially correct, but oversimplifies the distinction."
                  },
                  {
                    "text": "Parametric models are statistical, non-parametric models are AI-based.",
                    "score": 2,
                    "feedback": "Incorrect. Both can be statistical or AI-based."
                  },
                  {
                    "text": "There is no significant difference between parametric and non-parametric models.",
                    "score": 0,
                    "feedback": "Incorrect. They have fundamental differences."
                  }
                ]
              },
              {
                "question": "What is dimensionality reduction?",
                "answers": [
                  {
                    "text": "Dimensionality reduction reduces the number of features in a dataset while preserving important information.",
                    "score": 5,
                    "feedback": "Excellent. Clear and complete."
                  },
                  {
                    "text": "Dimensionality reduction simplifies data by removing less important or redundant features.",
                    "score": 4,
                    "feedback": "Good. Explains the purpose of simplification."
                  },
                  {
                    "text": "Dimensionality reduction selects the most relevant features.",
                    "score": 3,
                    "feedback": "Partially correct, but doesn't mention the goal of reducing dimensions."
                  },
                  {
                    "text": "Dimensionality reduction combines features to create new ones.",
                    "score": 2,
                    "feedback": "Partially correct; it can involve combining, but the main goal is *reduction*."
                  },
                  {
                    "text": "Dimensionality reduction is the process of increasing dimensionality.",
                    "score": 0,
                    "feedback": "Incorrect. The goal is to *reduce* dimensionality."
                  }
                ]
              },
              {
                "question": "What is the curse of dimensionality?",
                "answers": [
                  {
                    "text": "The curse of dimensionality is the negative impact of increasing features on model performance due to data sparsity.",
                    "score": 5,
                    "feedback": "Excellent. Captures the core concept of sparsity."
                  },
                  {
                    "text": "As dimensionality increases, data points become sparse, making distance-based models less effective.",
                    "score": 4,
                    "feedback": "Good. Explains the impact on distance-based methods."
                  },
                  {
                    "text": "More features can lead to computational complexity.",
                    "score": 3,
                    "feedback": "Partially correct, but doesn't fully explain the curse."
                  },
                  {
                    "text": "The curse of dimensionality is when a dataset has too many rows.",
                    "score": 2,
                    "feedback": "Incorrect. It's related to the number of *features* (columns), not rows."
                  },
                  {
                    "text": "The curse of dimensionality helps models by expanding features.",
                    "score": 0,
                    "feedback": "Incorrect. It hinders model performance."
                  }
                ]
            },
            {
                "question": "  What are precision, recall, and F1-score?",
                "answers": [
                    {
                        "text": "  Precision measures the proportion of correctly predicted positive cases, recall measures the ability to detect all positive cases, and F1-score balances both.",
                        "score": 5,
                        "feedback": "Excellent! Well-explained with clarity."
                    },
                    {
                        "text": "  Precision is the accuracy of positive predictions, recall measures the ability to capture positives, and F1-score is their harmonic mean.",
                        "score": 4,
                        "feedback": "Good answer! Some details could be expanded upon."
                    },
                    {
                        "text": "  Precision and recall measure model accuracy, but they are interchangeable.",
                        "score": 3,
                        "feedback": "Partially correct, but missing some key aspects."
                    },
                    {
                        "text": "  Precision and recall are two unrelated metrics, and F1-score is not necessary.",
                        "score": 2,
                        "feedback": "Needs improvement. Consider covering the concept more clearly."
                    },
                    {
                        "text": "  Precision, recall, and F1-score are important for accuracy, accuracy, and accuracy.",
                        "score": 0,
                        "feedback": "Incorrect. Please review the concept carefully."
                    }
                ]
            },
            {
                "question": "What is the difference between regression and classification?",
                "answers": [
                  {
                    "text": "Regression predicts continuous values, while classification predicts discrete categories or labels.",
                    "score": 5,
                    "feedback": "Excellent. Clear and concise."
                  },
                  {
                    "text": "Regression outputs a number, classification outputs a class.",
                    "score": 4,
                    "feedback": "Good. Simple and understandable."
                  },
                  {
                    "text": "Both regression and classification make predictions, but classification is simpler.",
                    "score": 3,
                    "feedback": "Partially correct, but doesn't explain the core difference."
                  },
                  {
                    "text": "Regression and classification are the same thing.",
                    "score": 1,
                    "feedback": "Incorrect. They have distinct goals."
                  },
                  {
                    "text": "There's no difference between them.",
                    "score": 0,
                    "feedback": "Incorrect. They are different types of machine learning tasks."
                  }
                ]
              },
              {
                "question": "What is feature engineering?",
                "answers": [
                  {
                    "text": "Feature engineering is the process of creating, transforming, and selecting features to improve model performance.",
                    "score": 5,
                    "feedback": "Excellent. Comprehensive and accurate."
                  },
                  {
                    "text": "Feature engineering involves modifying or creating features to boost a model's predictive power.",
                    "score": 4,
                    "feedback": "Good. Explains the purpose of feature engineering."
                  },
                  {
                    "text": "Feature engineering is about selecting relevant features.",
                    "score": 3,
                    "feedback": "Partially correct, but also includes creation and transformation."
                  },
                  {
                    "text": "Feature engineering is the same as data cleaning.",
                    "score": 2,
                    "feedback": "Incorrect. Data cleaning is a part of data preprocessing, but distinct from feature engineering."
                  },
                  {
                    "text": "Feature engineering is not necessary for machine learning.",
                    "score": 0,
                    "feedback": "Incorrect. It's a crucial step in many machine learning projects."
                  }
                ]
              },
              {
                "question": "What is PCA (Principal Component Analysis)?",
                "answers": [
                  {
                    "text": "PCA is a dimensionality reduction technique that finds uncorrelated principal components in the data.",
                    "score": 5,
                    "feedback": "Excellent. Concise and accurate."
                  },
                  {
                    "text": "PCA reduces data dimensions by finding the most important features.",
                    "score": 4,
                    "feedback": "Good. Explains the main goal of PCA."
                  },
                  {
                    "text": "PCA helps with dimensionality reduction, but doesn't always improve performance.",
                    "score": 3,
                    "feedback": "Partially correct. It's *intended* to improve performance, but might not always succeed."
                  },
                  {
                    "text": "PCA speeds up models by randomly removing features.",
                    "score": 2,
                    "feedback": "Incorrect. PCA is more sophisticated than random removal."
                  },
                  {
                    "text": "PCA is an outdated method in machine learning.",
                    "score": 0,
                    "feedback": "Incorrect. PCA is still a widely used technique."
                  }
                ]
              },
              {
                "question": "What is a confusion matrix?",
                "answers": [
                  {
                    "text": "A confusion matrix is a table used to evaluate classification models, showing counts of true/false positives/negatives.",
                    "score": 5,
                    "feedback": "Excellent. Clear and complete."
                  },
                  {
                    "text": "A confusion matrix shows how confused a classification model is.",
                    "score": 4,
                    "feedback": "Good. Simple explanation, but could be more precise."
                  },
                  {
                    "text": "A confusion matrix shows correct and incorrect predictions.",
                    "score": 3,
                    "feedback": "Partially correct, but doesn't mention the four key components (TP, FP, TN, FN)."
                  },
                  {
                    "text": "A confusion matrix is just a table of model predictions.",
                    "score": 2,
                    "feedback": "Needs more detail about its purpose and contents."
                  },
                  {
                    "text": "A confusion matrix is not necessary for model evaluation.",
                    "score": 0,
                    "feedback": "Incorrect. It's a very useful tool for evaluating classification models."
                  }
                ]
              },
              {
                "question": "Explain entropy and information gain in decision trees.",
                "answers": [
                  {
                    "text": "Entropy measures data impurity, while information gain measures the reduction in entropy after a split.",
                    "score": 5,
                    "feedback": "Excellent. Concise and accurate."
                  },
                  {
                    "text": "Entropy quantifies uncertainty, and information gain helps choose the best split by maximizing the reduction in uncertainty.",
                    "score": 4,
                    "feedback": "Good. Explains the purpose of both concepts."
                  },
                  {
                    "text": "Entropy is randomness, information gain is how much structure a split introduces.",
                    "score": 3,
                    "feedback": "Partially correct, but could be more precise about the relationship between them."
                  },
                  {
                    "text": "Entropy and information gain are the same thing.",
                    "score": 1,
                    "feedback": "Incorrect. They are related, but distinct concepts."
                  },
                  {
                    "text": "Entropy and information gain are not used in decision trees.",
                    "score": 0,
                    "feedback": "Incorrect. They are fundamental to how decision trees are built."
                  }
                ]
              },
              {
                "question": "Explain random forest.",
                "answers": [
                  {
                    "text": "A random forest combines multiple decision trees, each trained on a different subset of data and features, to make predictions.  It aggregates their outputs for improved accuracy and robustness.",
                    "score": 5,
                    "feedback": "Excellent! Clear, concise, and complete. Explains the key elements of data/feature subsetting and aggregation."
                  },
                  {
                    "text": "Random forests use many decision trees and combine their results for better predictions.",
                    "score": 4,
                    "feedback": "Good.  Covers the core idea but could be more specific about the training process and how the trees are different."
                  },
                  {
                    "text": "A random forest is a collection of decision trees.",
                    "score": 3,
                    "feedback": "Partially correct.  While true, it doesn't explain *how* the trees are used or why it's beneficial."
                  },
                  {
                    "text": "Random forests are just a bunch of decision trees put together.",
                    "score": 2,
                    "feedback": "Superficial.  Doesn't explain the purpose or mechanics of the ensemble."
                  },
                  {
                    "text": "Random forests are a type of neural network.",
                    "score": 1,
                    "feedback": "Incorrect. Random forests are ensemble methods based on decision trees, not neural networks."
                  },
                  {
                    "text": "Random forests are not used in machine learning.",
                    "score": 0,
                    "feedback": "Incorrect. Random forests are a popular and effective machine learning algorithm."
                  }
                ]
              },
              {
                "question": "What is gradient boosting?",
                "answers": [
                  {
                    "text": "Gradient boosting builds models sequentially, where each new model corrects the errors of its predecessors. It uses gradient descent to minimize the loss function.",
                    "score": 5,
                    "feedback": "Excellent!  Clearly explains the sequential nature and the role of gradient descent."
                  },
                  {
                    "text": "Gradient boosting iteratively refines weak models (often decision trees) to create a strong predictive model.",
                    "score": 4,
                    "feedback": "Good.  Covers the iterative refinement and the use of weak learners."
                  },
                  {
                    "text": "Gradient boosting trains multiple models and picks the best one.",
                    "score": 3,
                    "feedback": "Partially correct.  It combines the models, not just picks one.  It combines them in a specific, weighted way."
                  },
                  {
                    "text": "Gradient boosting is a way to train many models very quickly.",
                    "score": 2,
                    "feedback": "Misleading. While it can be efficient, the primary focus is on improving accuracy through sequential correction, not speed."
                  },
                  {
                    "text": "Gradient boosting is the same as random forest.",
                    "score": 1,
                    "feedback": "Incorrect.  They are both ensemble methods, but they work in fundamentally different ways."
                  },
                  {
                    "text": "Gradient boosting is an outdated technique.",
                    "score": 0,
                    "feedback": "Incorrect. Gradient boosting remains a powerful and widely used technique."
                  }
                ]
              },
              {
                "question": "What is regularization in machine learning?",
                "answers": [
                  {
                    "text": "Regularization prevents overfitting by adding a penalty term to the loss function, discouraging overly complex models. L1 and L2 are common types.",
                    "score": 5,
                    "feedback": "Excellent!  Clearly explains the purpose and mentions common regularization types."
                  },
                  {
                    "text": "Regularization helps prevent overfitting by penalizing large weights in the model.",
                    "score": 4,
                    "feedback": "Good.  Focuses on the impact on weights, but could be more explicit about the loss function."
                  },
                  {
                    "text": "Regularization adjusts model weights.",
                    "score": 3,
                    "feedback": "Partially correct, but doesn't explain *why* or *how* this helps."
                  },
                  {
                    "text": "Regularization is just a way to fine-tune a model.",
                    "score": 2,
                    "feedback": "Vague.  Doesn't explain the specific purpose of regularization."
                  },
                  {
                    "text": "Regularization is not needed in machine learning.",
                    "score": 1,
                    "feedback": "Incorrect. Regularization is crucial for preventing overfitting."
                  },
                  {
                    "text": "Regularization is the same as increasing the dataset size.",
                    "score": 0,
                    "feedback": "Incorrect. While both can help with overfitting, they are distinct techniques."
                  }
                ]
              },
              {
                "question": "What is an activation function in neural networks?",
                "answers": [
                  {
                    "text": "Activation functions introduce non-linearity, enabling neural networks to learn complex patterns. They determine a neuron's output based on its input.",
                    "score": 5,
                    "feedback": "Excellent! Clearly explains the role of non-linearity and the neuron's output."
                  },
                  {
                    "text": "Activation functions decide whether a neuron should be activated, introducing non-linearity into the network.",
                    "score": 4,
                    "feedback": "Good.  Covers the activation decision and non-linearity."
                  },
                  {
                    "text": "Activation functions help pass data through the network.",
                    "score": 3,
                    "feedback": "Partially correct, but doesn't explain the crucial role of non-linearity."
                  },
                  {
                    "text": "Activation functions are just mathematical equations.",
                    "score": 2,
                    "feedback": "True, but doesn't explain their significance in the network's learning process."
                  },
                  {
                    "text": "Activation functions are optional in neural networks.",
                    "score": 1,
                    "feedback": "Incorrect. They are essential for learning non-linear patterns."
                  },
                  {
                    "text": "Activation functions are used to speed up training.",
                    "score": 0,
                    "feedback": "Misleading. While some activation functions might have computational advantages, their primary role is to introduce non-linearity."
                  }
                ]
              },
              {
                "question": "Explain the difference between bagging and boosting.",
                "answers": [
                  {
                    "text": "Bagging trains multiple models independently and averages their predictions to reduce variance. Boosting trains models sequentially, where each model focuses on correcting the errors of previous ones to reduce bias.",
                    "score": 5,
                    "feedback": "Excellent! Clearly distinguishes the parallel vs. sequential training and the impact on variance vs. bias."
                  },
                  {
                    "text": "Bagging uses parallel training to reduce variance, while boosting uses sequential training to improve accuracy.",
                    "score": 4,
                    "feedback": "Good.  Covers the training approach and the general impact on performance."
                  },
                  {
                    "text": "Both bagging and boosting are ensemble methods, but boosting focuses on difficult cases.",
                    "score": 3,
                    "feedback": "Partially correct.  While true, it doesn't explain *how* boosting focuses on difficult cases (through weighting or error correction)."
                  },
                  {
                    "text": "Bagging and boosting are the same thing.",
                    "score": 1,
                    "feedback": "Incorrect. They are distinct ensemble methods with different approaches."
                  },
                  {
                    "text": "Bagging and boosting are not used in machine learning.",
                    "score": 0,
                    "feedback": "Incorrect. They are fundamental ensemble techniques."
                  }
                ]
              },
              {
                "question": "What is transfer learning?",
                "answers": [
                  {
                    "text": "Transfer learning reuses a pre-trained model on a new, related task, often fine-tuning it with the new data.",
                    "score": 5,
                    "feedback": "Excellent! Concise and complete. Covers both reuse and fine-tuning."
                  },
                  {
                    "text": "Transfer learning uses a pre-trained model and adapts it to a new dataset.",
                    "score": 4,
                    "feedback": "Good.  Covers the core idea of adapting a pre-trained model."
                  },
                  {
                    "text": "Transfer learning trains models on different data.",
                    "score": 3,
                    "feedback": "Partially correct, but it's more about *reusing* a model trained on other data."
                  },
                  {
                    "text": "Transfer learning trains models on different data without any modifications.",
                    "score": 2,
                    "feedback": "Incorrect.  Modifications (fine-tuning) are usually a key part of transfer learning."
                  },
                  {
                    "text": "Transfer learning is not used in deep learning.",
                    "score": 0,
                    "feedback": "Incorrect.  Transfer learning is a common and powerful technique in deep learning."
                  }
                ]
              },
              {
                "question": "What is cross-validation?",
                "answers": [
                  {
                    "text": "Cross-validation evaluates model performance by partitioning data into multiple folds, training on some, and testing on the rest, averaging the results.",
                    "score": 5,
                    "feedback": "Excellent! Clear and complete. Explains the partitioning, training/testing, and averaging."
                  },
                  {
                    "text": "Cross-validation helps assess how well a model generalizes to unseen data by using multiple train-test splits.",
                    "score": 4,
                    "feedback": "Good. Focuses on generalization and multiple splits."
                  },
                  {
                    "text": "Cross-validation trains a model multiple times.",
                    "score": 3,
                    "feedback": "Partially correct, but doesn't explain *why* or how the multiple training runs are used."
                  },
                  {
                    "text": "Cross-validation is a way to make models train faster.",
                    "score": 2,
                    "feedback": "Misleading. While it might have some indirect impact on development time, the main goal is model evaluation, not speed."
                  },
                  {
                    "text": "Cross-validation is not necessary for model evaluation.",
                    "score": 0,
                    "feedback": "Incorrect. It's a crucial technique for robust model evaluation."
                  }
                ]
              },
              {
                "question": "Explain the bias-variance tradeoff.",
                "answers": [
                  {
                    "text": "The bias-variance tradeoff describes the balance between a model's ability to fit training data (low bias) and its ability to generalize to unseen data (low variance).  Ideally, we want both.",
                    "score": 5,
                    "feedback": "Excellent!  Clearly explains the tradeoff and the ideal scenario."
                  },
                  {
                    "text": "High bias means the model underfits, while high variance means it overfits.  We want a balance.",
                    "score": 4,
                    "feedback": "Good. Explains the connection to underfitting and overfitting."
                  },
                  {
                    "text": "Bias and variance are two things that affect model accuracy.",
                    "score": 3,
                    "feedback": "Partially correct, but doesn't explain the *relationship* between them or their impact on generalization."
                  },
                  {
                    "text": "Bias and variance are the same thing.",
                    "score": 1,
                    "feedback": "Incorrect. They are distinct concepts, although related."
                  },
                  {
                    "text": "The bias-variance tradeoff is not important in machine learning.",
                    "score": 0,
                    "feedback": "Incorrect. It's a fundamental concept in understanding model performance."
                  }
                ]
              },
              {
                "question": "What is the difference between supervised and unsupervised learning?",
                "answers": [
                  {
                    "text": "Supervised learning uses labeled data (input-output pairs), while unsupervised learning uses unlabeled data, finding patterns within the data itself.",
                    "score": 5,
                    "feedback": "Excellent! Clearly distinguishes based on labeled vs. unlabeled data."
                  },
                  {
                    "text": "Supervised learning learns from examples with answers, unsupervised learning finds patterns without answers.",
                    "score": 4,
                    "feedback": "Good.  Simple and understandable analogy."
                  },
                  {
                    "text": "Supervised learning is easier than unsupervised learning.",
                    "score": 3,
                    "feedback": "Partially correct in some contexts, but doesn't explain the fundamental difference."
                  },
                  {
                    "text": "Supervised and unsupervised learning are the same thing.",
                    "score": 1,
                    "feedback": "Incorrect. They are fundamentally different approaches."
                  },
                  {
                    "text": "Unsupervised learning is not used in practice.",
                    "score": 0,
                    "feedback": "Incorrect. Unsupervised learning is used in many applications (e.g., clustering, dimensionality reduction)."
                  }
                ]
              },
              {
                "question": "Expand on bias-variance tradeoff in machine learning?",
                "answers": [
                    {
                        "text": "The bias-variance tradeoff describes the balance between underfitting and overfitting.",
                        "score": 5,
                        "feedback": "Excellent! Clearly explains the concept."
                    },
                    {
                        "text": "It is a tradeoff between a model's complexity and its ability to generalize.",
                        "score": 4,
                        "feedback": "Good, but could clarify how bias and variance interact."
                    },
                    {
                        "text": "Bias and variance are the same thing in machine learning.",
                        "score": 3,
                        "feedback": "Partially correct. Bias and variance need to be distinguished."
                    },
                    {
                        "text": "Reducing bias always improves model performance.",
                        "score": 2,
                        "feedback": "Not entirely true. Need to consider variance as well."
                    },
                    {
                        "text": "Variance is good and bias is bad in all cases.",
                        "score": 0,
                        "feedback": "Incorrect. Both need to be balanced for optimal model performance."
                    }
                ]
            },
            {
                "question": "Explain the concept of feature scaling in machine learning.",
                "answers": [
                    {
                        "text": "Feature scaling ensures that all input variables are on the same scale for better model performance.",
                        "score": 5,
                        "feedback": "Excellent! Explains the purpose and importance of scaling."
                    },
                    {
                        "text": "Feature scaling converts all numbers to the same range.",
                        "score": 4,
                        "feedback": "Good, but should mention techniques like normalization or standardization."
                    },
                    {
                        "text": "Scaling features means normalizing them.",
                        "score": 3,
                        "feedback": "Partially correct. Scaling includes both normalization and standardization."
                    },
                    {
                        "text": "Feature scaling removes irrelevant data.",
                        "score": 2,
                        "feedback": "Incorrect. Scaling only affects the range of numerical values."
                    },
                    {
                        "text": "Feature scaling is not necessary in machine learning.",
                        "score": 0,
                        "feedback": "Incorrect. Many models perform poorly without proper scaling."
                    }
                ]
            },
            {
                "question": "Expand on regularization in machine learning briefly?",
                "answers": [
                    {
                        "text": "Regularization is a technique used to prevent overfitting by adding constraints to the model.",
                        "score": 5,
                        "feedback": "Excellent! Clearly defines the purpose of regularization."
                    },
                    {
                        "text": "Regularization prevents models from memorizing training data.",
                        "score": 4,
                        "feedback": "Good, but could mention techniques like L1 or L2 regularization."
                    },
                    {
                        "text": "Regularization reduces model complexity.",
                        "score": 3,
                        "feedback": "Partially correct. Needs more details on how it works."
                    },
                    {
                        "text": "Regularization is a method to improve accuracy.",
                        "score": 2,
                        "feedback": "Not exactly. It improves generalization rather than just accuracy."
                    },
                    {
                        "text": "Regularization is about removing irrelevant features.",
                        "score": 0,
                        "feedback": "Incorrect. It adds constraints to prevent overfitting."
                    }
                ]
            },
            {
                "question": "How do lists differ from tuples in Python?",
                "answers": [
                    {
                        "text": "Lists can be modified, but tuples remain fixed. Lists are slower.",
                        "score": 5,
                        "feedback": "Great explanation! Covers both mutability and speed."
                    },
                    {
                        "text": "Lists are changeable, while tuples are not. They use different brackets.",
                        "score": 4,
                        "feedback": "Good answer, but missing performance differences."
                    },
                    {
                        "text": "Lists allow modification, but tuples do not. Both store multiple elements.",
                        "score": 3,
                        "feedback": "Partially correct. Needs more detail on syntax and efficiency."
                    },
                    {
                        "text": "Lists are better since they are flexible.",
                        "score": 2,
                        "feedback": "Too vague. Needs more explanation of differences."
                    },
                    {
                        "text": "Lists and tuples are the same.",
                        "score": 0,
                        "feedback": "Incorrect. Lists are mutable, while tuples are immutable."
                    }
                ]
            },
            
            {
                "question": "Describe overfitting in machine learning.",
                "answers": [
                    {
                        "text": "Overfitting occurs when a model memorizes training data instead of recognizing patterns.",
                        "score": 5,
                        "feedback": "Excellent! Clearly explains the problem of poor generalization."
                    },
                    {
                        "text": "A model is too accurate on training data but fails on new data.",
                        "score": 4,
                        "feedback": "Good explanation! Consider mentioning lack of generalization explicitly."
                    },
                    {
                        "text": "Overfitting means the model has been trained too much.",
                        "score": 3,
                        "feedback": "Partially correct, but needs more context on why this is a problem."
                    },
                    {
                        "text": "It happens when a model becomes too complex.",
                        "score": 2,
                        "feedback": "Too vague. Explain how it impacts performance on new data."
                    },
                    {
                        "text": "A model that overfits is better than one that underfits.",
                        "score": 0,
                        "feedback": "Incorrect. Both overfitting and underfitting lead to poor model performance."
                    }
                ]
            },
            {
                "question": "What is the difference between mean and median?",
                "answers": [
                    {"text": "Mean is the average of all values, while median is the middle value when sorted.", "score": 5, "feedback": "Great! Clearly explains both concepts."},
                    {"text": "Mean and median are the same thing.", "score": 0, "feedback": "Incorrect. They are different measures of central tendency."},
                    {"text": "Mean is always larger than the median.", "score": 2, "feedback": "Not necessarily true. Depends on data distribution."},
                    {"text": "Median is affected by outliers, while mean is not.", "score": 3, "feedback": "Partially correct. Itâ€™s actually the oppositeâ€”mean is sensitive to outliers."},
                    {"text": "Mean is only used for normal distributions.", "score": 1, "feedback": "Incorrect. Mean is used for all types of distributions."}
                ]
            },
            {
                "question": "What is standard deviation?",
                "answers": [
                    {"text": "Standard deviation measures how spread out values are in a dataset.", "score": 5, "feedback": "Excellent! Captures the key concept well."},
                    {"text": "It is the same as variance.", "score": 2, "feedback": "Not exactly. Standard deviation is the square root of variance."},
                    {"text": "A higher standard deviation means the data points are close together.", "score": 0, "feedback": "Incorrect. A higher standard deviation means data is more spread out."},
                    {"text": "Standard deviation is always positive.", "score": 4, "feedback": "Mostly correct, but it can be zero when all values are the same."},
                    {"text": "Standard deviation measures the average value of a dataset.", "score": 1, "feedback": "Incorrect. It measures spread, not central tendency."}
                ]
            },
            {
                "question": "What is a p-value in hypothesis testing?",
                "answers": [
                    {"text": "A p-value represents the probability of obtaining results at least as extreme as the observed data, given that the null hypothesis is true.", "score": 5, "feedback": "Perfect answer! Clearly defines the p-value."},
                    {"text": "A p-value tells us whether the null hypothesis is true.", "score": 2, "feedback": "Incorrect. It only tells us the strength of evidence against the null hypothesis."},
                    {"text": "A low p-value means we accept the null hypothesis.", "score": 0, "feedback": "Incorrect. A low p-value suggests rejecting the null hypothesis."},
                    {"text": "A p-value is always between 0 and 1.", "score": 4, "feedback": "Correct! This is an important property of p-values."},
                    {"text": "P-values are only used in regression analysis.", "score": 1, "feedback": "Incorrect. P-values are used in various statistical tests."}
                ]
            },
            {
                "question": "What is the central limit theorem?",
                "answers": [
                    {"text": "The central limit theorem states that the distribution of sample means approaches a normal distribution as sample size increases.", "score": 5, "feedback": "Excellent! Clearly explains the concept."},
                    {"text": "It states that all data is normally distributed.", "score": 0, "feedback": "Incorrect. It applies to sample means, not all data."},
                    {"text": "It says that the mean of a sample equals the mean of the population.", "score": 2, "feedback": "Partially correct. It relates to distribution shape, not just means."},
                    {"text": "The theorem only applies to large datasets.", "score": 3, "feedback": "Not quite. The key point is increasing sample size, not dataset size."},
                    {"text": "It helps determine confidence intervals.", "score": 4, "feedback": "Correct! It is used in confidence interval calculations."}
                ]
            },
            {
                "question": "What is correlation in statistics?",
                "answers": [
                    {"text": "Correlation measures the strength and direction of a relationship between two variables.", "score": 5, "feedback": "Great! This captures both strength and direction."},
                    {"text": "Correlation means that one variable causes another to change.", "score": 0, "feedback": "Incorrect. Correlation does not imply causation."},
                    {"text": "A correlation of zero means the variables are independent.", "score": 3, "feedback": "Partially correct, but depends on the type of correlation."},
                    {"text": "Positive correlation means both variables decrease together.", "score": 2, "feedback": "Incorrect. Positive correlation means they increase together."},
                    {"text": "Correlation is the same as regression.", "score": 1, "feedback": "Incorrect. Regression predicts relationships, correlation measures them."}
                ]
            },
            {
                "question": "What is the difference between population and sample in statistics?",
                "answers": [
                    {"text": "A population includes all members of a group, while a sample is a subset taken from the population.", "score": 5, "feedback": "Great! Clearly distinguishes both terms."},
                    {"text": "Population and sample mean the same thing.", "score": 0, "feedback": "Incorrect. They are different concepts in statistics."},
                    {"text": "A sample always includes at least half of the population.", "score": 2, "feedback": "Incorrect. A sample can be any subset of a population."},
                    {"text": "Samples are always representative of populations.", "score": 3, "feedback": "Not always. Proper sampling methods ensure representativeness."},
                    {"text": "Populations are always infinite in size.", "score": 1, "feedback": "Incorrect. Populations can be finite or infinite."}
                ]
            },
            {
                "question": "What is the null hypothesis in hypothesis testing?",
                "answers": [
                    {"text": "The null hypothesis states that there is no effect or no difference in a statistical test.", "score": 5, "feedback": "Perfect! This is the correct definition."},
                    {"text": "The null hypothesis is what we try to prove true.", "score": 2, "feedback": "Not exactly. We usually try to reject the null hypothesis."},
                    {"text": "A null hypothesis is always false.", "score": 0, "feedback": "Incorrect. The null hypothesis can be true or false."},
                    {"text": "The null hypothesis is used in probability calculations.", "score": 4, "feedback": "Mostly correct. It is tested using probability measures."},
                    {"text": "It states that there is always a significant difference.", "score": 1, "feedback": "Incorrect. The null hypothesis assumes no significant difference."}
                ]
            },
            {
                "question": "What is the purpose of an alternative hypothesis?",
                "answers": [
                    {"text": "The alternative hypothesis represents what we seek evidence for in hypothesis testing.", "score": 5, "feedback": "Great! This is the correct understanding."},
                    {"text": "An alternative hypothesis is the same as a null hypothesis.", "score": 0, "feedback": "Incorrect. They represent opposite claims."},
                    {"text": "It is always accepted if the p-value is low.", "score": 3, "feedback": "Partially correct. It suggests evidence but does not guarantee truth."},
                    {"text": "The alternative hypothesis always contradicts the null hypothesis.", "score": 4, "feedback": "Correct! They are mutually exclusive."},
                    {"text": "Alternative hypotheses are only used in regression models.", "score": 1, "feedback": "Incorrect. They apply to all hypothesis tests."}
                ]
            },
            {
                "question": "What is the difference between Type I and Type II errors?",
                "answers": [
                    {"text": "A Type I error is rejecting a true null hypothesis, while a Type II error is failing to reject a false null hypothesis.", "score": 5, "feedback": "Perfect! Clearly defines both error types."},
                    {"text": "Type I and Type II errors mean the same thing.", "score": 0, "feedback": "Incorrect. They are distinct types of statistical errors."},
                    {"text": "Type I errors occur when the alternative hypothesis is true.", "score": 2, "feedback": "Not quite. Type I errors happen when rejecting a true null hypothesis."},
                    {"text": "Type II errors occur when we accept the null hypothesis.", "score": 3, "feedback": "Partially correct. We do not 'accept' the null but fail to reject it."},
                    {"text": "A Type I error is more serious than a Type II error.", "score": 4, "feedback": "Depends on the context, but often true in medical testing."}
                ]
            },
            {
                "question": "What is the interquartile range (IQR) in statistics?",
                "answers": [
                    {"text": "IQR is the difference between the 75th percentile (Q3) and the 25th percentile (Q1).", "score": 5, "feedback": "Great! Clearly defines IQR."},
                    {"text": "IQR is the same as standard deviation.", "score": 0, "feedback": "Incorrect. IQR measures spread differently from standard deviation."},
                    {"text": "A higher IQR means less variability in the dataset.", "score": 2, "feedback": "Not quite. A higher IQR suggests more spread in the middle 50% of data."},
                    {"text": "IQR is only used for normally distributed data.", "score": 1, "feedback": "Incorrect. It can be used for any data distribution."},
                    {"text": "IQR helps identify outliers in a dataset.", "score": 4, "feedback": "Correct! Outliers are often outside 1.5 times the IQR range."}
                ]
            },
            {
                "question": "What is skewness in a dataset?",
                "answers": [
                    {"text": "Skewness measures the asymmetry of a data distribution.", "score": 5, "feedback": "Excellent! Clearly defines skewness."},
                    {"text": "Skewness tells how spread out the data is.", "score": 2, "feedback": "Not exactly. That describes variance or standard deviation."},
                    {"text": "Skewness is always a positive number.", "score": 0, "feedback": "Incorrect. Skewness can be positive, negative, or zero."},
                    {"text": "A positively skewed distribution has a longer tail on the right.", "score": 4, "feedback": "Correct! Positively skewed distributions have a right tail."},
                    {"text": "Skewness is irrelevant in real-world datasets.", "score": 1, "feedback": "Incorrect. Skewness is important in analyzing distributions."}
                ]
            },
            {
                "question": "What is kurtosis in statistics?",
                "answers": [
                    {"text": "Kurtosis measures whether data has heavy or light tails compared to a normal distribution.", "score": 5, "feedback": "Great! Clearly explains the concept."},
                    {"text": "Kurtosis is another term for skewness.", "score": 0, "feedback": "Incorrect. They measure different aspects of a distribution."},
                    {"text": "Kurtosis only applies to normal distributions.", "score": 2, "feedback": "Not true. It applies to all distributions."},
                    {"text": "A high kurtosis value means a dataset has extreme outliers.", "score": 4, "feedback": "Mostly correct! Higher kurtosis suggests more extreme values."},
                    {"text": "Kurtosis measures how peaked a distribution is.", "score": 3, "feedback": "Partially correct. It includes peak and tail properties."}
                ]
            },
            {
                "question": "What is a box plot used for in statistics?",
                "answers": [
                    {"text": "A box plot is used to visualize the distribution, median, quartiles, and potential outliers in a dataset.", "score": 5, "feedback": "Perfect! Captures all essential details."},
                    {"text": "Box plots are used for correlation analysis.", "score": 0, "feedback": "Incorrect. Correlation is shown in scatter plots, not box plots."},
                    {"text": "A box plot shows the mean of a dataset.", "score": 2, "feedback": "Not entirely true. It highlights the median, not the mean."},
                    {"text": "Box plots are useful for comparing multiple distributions.", "score": 4, "feedback": "Correct! They are great for visualizing multiple groups."},
                    {"text": "Box plots are only used for large datasets.", "score": 1, "feedback": "Incorrect. They can be used for small datasets too."}
                ]
            },
            {
                "question": "What does R-squared represent in regression analysis?",
                "answers": [
                    {"text": "R-squared measures how well the independent variables explain the variation in the dependent variable.", "score": 5, "feedback": "Great! Clearly defines R-squared."},
                    {"text": "A higher R-squared always means a better model.", "score": 2, "feedback": "Not always true. A high R-squared may indicate overfitting."},
                    {"text": "R-squared can be negative.", "score": 0, "feedback": "Incorrect. R-squared ranges from 0 to 1."},
                    {"text": "R-squared is also known as the correlation coefficient.", "score": 3, "feedback": "Partially correct. The correlation coefficient is the square root of R-squared."},
                    {"text": "R-squared helps assess the fit of a regression model.", "score": 4, "feedback": "Correct! It measures the explanatory power of a model."}
                ]
            },
            {
                "question": "What is an outlier in statistics?",
                "answers": [
                    {"text": "An outlier is a data point significantly different from other observations in a dataset.", "score": 5, "feedback": "Excellent! Clearly defines outliers."},
                    {"text": "Outliers always need to be removed from datasets.", "score": 2, "feedback": "Not always true. Some outliers contain valuable information."},
                    {"text": "Outliers are points that are within one standard deviation from the mean.", "score": 0, "feedback": "Incorrect. Outliers are usually far from the mean."},
                    {"text": "Outliers can be detected using the IQR method.", "score": 4, "feedback": "Correct! The IQR method is commonly used to find outliers."},
                    {"text": "Outliers do not affect machine learning models.", "score": 1, "feedback": "Incorrect. Outliers can significantly impact models."}
                ]
            },
            {
                "question": "What is the difference between descriptive and inferential statistics?",
                "answers": [
                    {"text": "Descriptive statistics summarize data, while inferential statistics make predictions from data.", "score": 5, "feedback": "Excellent! Clearly explains both concepts."},
                    {"text": "Descriptive statistics use probability, while inferential statistics do not.", "score": 2, "feedback": "Not entirely correct. Inferential statistics rely on probability."},
                    {"text": "Descriptive statistics are more important than inferential statistics.", "score": 0, "feedback": "Incorrect. Both are equally valuable in data analysis."},
                    {"text": "Inferential statistics only work on large datasets.", "score": 3, "feedback": "Partially correct. Inferential statistics work better with larger samples but can be used on small datasets too."},
                    {"text": "Descriptive statistics use hypothesis testing.", "score": 1, "feedback": "Incorrect. Hypothesis testing is part of inferential statistics."}
                ]
            },
            {
                "question": "What is a probability distribution?",
                "answers": [
                    {"text": "A probability distribution describes how values in a dataset are likely to be distributed.", "score": 5, "feedback": "Great! Clearly defines the concept."},
                    {"text": "Probability distributions are only used in machine learning.", "score": 0, "feedback": "Incorrect. They are widely used in statistics and various applications."},
                    {"text": "All probability distributions are normal distributions.", "score": 2, "feedback": "Incorrect. There are many types of probability distributions."},
                    {"text": "A probability distribution must always be symmetric.", "score": 3, "feedback": "Not necessarily. Some distributions, like exponential, are asymmetric."},
                    {"text": "Probability distributions only apply to discrete data.", "score": 1, "feedback": "Incorrect. They apply to both discrete and continuous data."}
                ]
            },
            {
                "question": "What is Bayesian statistics?",
                "answers": [
                    {"text": "Bayesian statistics uses probability to update beliefs as new data is observed.", "score": 5, "feedback": "Excellent! Clearly explains the Bayesian approach."},
                    {"text": "Bayesian statistics assumes all probabilities are fixed.", "score": 0, "feedback": "Incorrect. Bayesian statistics updates probabilities with new evidence."},
                    {"text": "Frequentist and Bayesian statistics give identical results.", "score": 2, "feedback": "Not always. Bayesian methods incorporate prior knowledge."},
                    {"text": "Bayesian statistics only applies to small datasets.", "score": 1, "feedback": "Incorrect. It works for datasets of any size."},
                    {"text": "Bayesian inference is based on Bayes' theorem.", "score": 4, "feedback": "Correct! Bayesâ€™ theorem is the foundation of Bayesian inference."}
                ]
            },
            {
                "question": "What is the law of large numbers?",
                "answers": [
                    {"text": "The law of large numbers states that as sample size increases, the sample mean approaches the population mean.", "score": 5, "feedback": "Perfect! This is the correct interpretation."},
                    {"text": "A larger dataset always improves accuracy.", "score": 2, "feedback": "Not always. It depends on data quality and model choice."},
                    {"text": "The law of large numbers only applies to normal distributions.", "score": 0, "feedback": "Incorrect. It applies to all types of distributions."},
                    {"text": "Larger samples always eliminate bias.", "score": 3, "feedback": "Not necessarily. Bias depends on sampling methods, not size alone."},
                    {"text": "The law of large numbers ensures 100% accuracy.", "score": 1, "feedback": "Incorrect. It only ensures convergence of sample mean to population mean."}
                ]
            },
            {
                "question": "What is the purpose of hypothesis testing?",
                "answers": [
                    {"text": "Hypothesis testing determines whether there is enough statistical evidence to support a claim.", "score": 5, "feedback": "Great! Clearly explains the goal of hypothesis testing."},
                    {"text": "Hypothesis testing proves that a hypothesis is true.", "score": 0, "feedback": "Incorrect. It only tests the likelihood of a hypothesis being rejected."},
                    {"text": "Hypothesis testing is only used in medical research.", "score": 2, "feedback": "Incorrect. It is widely used in many fields, including business and social sciences."},
                    {"text": "A p-value below 0.05 means a hypothesis is always correct.", "score": 3, "feedback": "Not exactly. It just suggests strong evidence against the null hypothesis."},
                    {"text": "Hypothesis testing relies on confidence intervals.", "score": 4, "feedback": "Correct! Confidence intervals often accompany hypothesis tests."}
                ]
            },
            {
                "question": "What is the difference between parametric and non-parametric tests?",
                "answers": [
                    {"text": "Parametric tests assume a specific distribution, while non-parametric tests do not.", "score": 5, "feedback": "Excellent! Clearly explains both concepts."},
                    {"text": "Non-parametric tests are more accurate than parametric tests.", "score": 2, "feedback": "Not necessarily. Accuracy depends on data characteristics."},
                    {"text": "Parametric tests work for all types of data.", "score": 0, "feedback": "Incorrect. They require specific distribution assumptions."},
                    {"text": "Non-parametric tests are only used for small datasets.", "score": 3, "feedback": "Not exactly. They are also used when data doesn't meet normality assumptions."},
                    {"text": "Both types of tests require normally distributed data.", "score": 1, "feedback": "Incorrect. Non-parametric tests work without normality assumptions."}
                ]
            },
            {
                "question": "What is the purpose of a confidence interval?",
                "answers": [
                    {"text": "A confidence interval provides a range of values within which a population parameter is likely to fall.", "score": 5, "feedback": "Great! Clearly explains the concept."},
                    {"text": "A confidence interval gives the exact value of a population parameter.", "score": 0, "feedback": "Incorrect. It provides a range, not an exact value."},
                    {"text": "A 95% confidence interval means the result is 95% correct.", "score": 2, "feedback": "Not quite. It means we expect the true value to fall in this range 95% of the time."},
                    {"text": "A wider confidence interval means greater precision.", "score": 3, "feedback": "Incorrect. A narrower interval indicates higher precision."},
                    {"text": "Confidence intervals are always symmetrical.", "score": 1, "feedback": "Incorrect. They can be asymmetrical depending on data distribution."}
                ]
            },
            {
                "question": "What is heteroscedasticity in regression analysis?",
                "answers": [
                    {"text": "Heteroscedasticity occurs when the variance of residuals is not constant across all levels of an independent variable.", "score": 5, "feedback": "Excellent! Clearly defines heteroscedasticity."},
                    {"text": "Heteroscedasticity means residuals are normally distributed.", "score": 0, "feedback": "Incorrect. It refers to changing variance, not distribution shape."},
                    {"text": "It improves model accuracy.", "score": 2, "feedback": "Incorrect. It can actually make models unreliable."},
                    {"text": "Heteroscedasticity is always a good sign.", "score": 3, "feedback": "Not necessarily. It can indicate model misspecification."},
                    {"text": "It affects the interpretation of regression coefficients.", "score": 4, "feedback": "Correct! It impacts standard errors and inference."}
                ]
            },
            {
                "question": "What is the difference between a Z-test and a T-test?",
                "answers": [
                    {"text": "A Z-test is used when sample size is large (n>30), while a T-test is used for smaller samples.", "score": 5, "feedback": "Great! Clearly explains when to use each test."},
                    {"text": "Z-tests and T-tests are identical.", "score": 0, "feedback": "Incorrect. They differ in sample size and assumptions."},
                    {"text": "A Z-test is always more accurate than a T-test.", "score": 2, "feedback": "Not necessarily. Accuracy depends on sample size and data characteristics."},
                    {"text": "T-tests assume a normal distribution of population.", "score": 3, "feedback": "Partially correct. They assume approximately normal distribution for small samples."},
                    {"text": "A Z-test is only used for one-sample tests.", "score": 1, "feedback": "Incorrect. Z-tests can be used for multiple comparisons."}
                ]
            },
            {
                "question": "What is multicollinearity in regression analysis?",
                "answers": [
                    {"text": "Multicollinearity occurs when independent variables in a regression model are highly correlated.", "score": 5, "feedback": "Perfect! Clearly defines multicollinearity."},
                    {"text": "Multicollinearity occurs when residuals are correlated.", "score": 0, "feedback": "Incorrect. It refers to correlation among independent variables."},
                    {"text": "Multicollinearity always improves regression models.", "score": 2, "feedback": "Incorrect. It can make coefficient estimates unstable."},
                    {"text": "Multicollinearity does not affect model interpretation.", "score": 3, "feedback": "Not true. It makes interpreting coefficients more difficult."},
                    {"text": "Variance Inflation Factor (VIF) is used to detect multicollinearity.", "score": 4, "feedback": "Correct! VIF helps quantify multicollinearity."}
                ]
            },
            {
                "question": "What is a primary key in SQL?",
                "answers": [
                    {"text": "A primary key uniquely identifies each row in a table and cannot have NULL values.", "score": 5, "feedback": "Perfect! Clearly defines a primary key."},
                    {"text": "A primary key allows duplicate values in a table.", "score": 0, "feedback": "Incorrect. A primary key must be unique."},
                    {"text": "A table can have multiple primary keys.", "score": 2, "feedback": "Incorrect. A table can have only one primary key but multiple unique keys."},
                    {"text": "A primary key ensures data integrity in a database.", "score": 4, "feedback": "Correct! But could be expanded by mentioning constraints."},
                    {"text": "A primary key can be NULL.", "score": 1, "feedback": "Incorrect. A primary key cannot contain NULL values."}
                ]
            },
            {
                "question": "What is the difference between INNER JOIN and LEFT JOIN in SQL?",
                "answers": [
                    {"text": "INNER JOIN returns only matching rows, while LEFT JOIN returns all rows from the left table and matching rows from the right.", "score": 5, "feedback": "Excellent! Clearly defines both joins."},
                    {"text": "INNER JOIN and LEFT JOIN return the same results.", "score": 0, "feedback": "Incorrect. They return different results."},
                    {"text": "LEFT JOIN excludes rows that do not have matches.", "score": 2, "feedback": "Incorrect. LEFT JOIN keeps all rows from the left table."},
                    {"text": "INNER JOIN keeps unmatched rows in the result.", "score": 1, "feedback": "Incorrect. INNER JOIN only includes matched rows."},
                    {"text": "LEFT JOIN can be rewritten using UNION.", "score": 3, "feedback": "Partially correct, but it depends on the query structure."}
                ]
            },
            {
                "question": "What does the GROUP BY clause do in SQL?",
                "answers": [
                    {"text": "GROUP BY groups rows that have the same values in specified columns and allows aggregation functions.", "score": 5, "feedback": "Great answer! Explains purpose and usage clearly."},
                    {"text": "GROUP BY sorts the data in ascending order.", "score": 0, "feedback": "Incorrect. ORDER BY is used for sorting, not GROUP BY."},
                    {"text": "GROUP BY is required for using aggregate functions.", "score": 2, "feedback": "Not exactly. Aggregate functions can be used without GROUP BY."},
                    {"text": "GROUP BY works only with numeric columns.", "score": 1, "feedback": "Incorrect. GROUP BY works with all types of columns."},
                    {"text": "GROUP BY must always be used with HAVING.", "score": 3, "feedback": "Partially correct. HAVING is optional but commonly used."}
                ]
            },
            {
                "question": "What is the difference between DELETE and TRUNCATE in SQL?",
                "answers": [
                    {"text": "DELETE removes specific rows while TRUNCATE removes all rows in a table without logging individual row deletions.", "score": 5, "feedback": "Perfect! Explains both commands clearly."},
                    {"text": "DELETE and TRUNCATE do the same thing.", "score": 0, "feedback": "Incorrect. DELETE is logged row by row, while TRUNCATE is faster and removes all rows."},
                    {"text": "TRUNCATE can be rolled back using transactions.", "score": 2, "feedback": "Not entirely correct. TRUNCATE is often irreversible."},
                    {"text": "DELETE resets auto-increment counters, while TRUNCATE does not.", "score": 3, "feedback": "Partially correct. TRUNCATE often resets auto-increment."},
                    {"text": "TRUNCATE is a DML command, just like DELETE.", "score": 1, "feedback": "Incorrect. TRUNCATE is a DDL command, not DML."}
                ]
            },
            {
                "question": "What is normalization in databases?",
                "answers": [
                    {"text": "Normalization is the process of organizing data to minimize redundancy and dependency.", "score": 5, "feedback": "Excellent! Clearly explains normalization."},
                    {"text": "Normalization removes data from the database.", "score": 0, "feedback": "Incorrect. It restructures data, but does not remove it."},
                    {"text": "Normalization is only useful for small databases.", "score": 2, "feedback": "Incorrect. It improves efficiency for both small and large databases."},
                    {"text": "Normalization increases redundancy to make queries faster.", "score": 3, "feedback": "Incorrect. It actually reduces redundancy."},
                    {"text": "Denormalization is the same as normalization.", "score": 1, "feedback": "Incorrect. Denormalization is the opposite process."}
                ]
            },
                {
                    "question": "What is the purpose of the HAVING clause in SQL?",
                    "answers": [
                        {"text": "HAVING is used to filter grouped records based on aggregate function conditions.", "score": 5, "feedback": "Excellent! Clearly explains the purpose of HAVING."},
                        {"text": "HAVING works exactly like WHERE.", "score": 0, "feedback": "Incorrect. HAVING filters after aggregation, WHERE filters before."},
                        {"text": "HAVING can be used without GROUP BY.", "score": 2, "feedback": "Partially correct. While possible, HAVING is usually used with GROUP BY."},
                        {"text": "HAVING only works with COUNT().", "score": 1, "feedback": "Incorrect. It works with all aggregate functions."},
                        {"text": "HAVING allows filtering rows before aggregation occurs.", "score": 3, "feedback": "Incorrect. Filtering before aggregation is done using WHERE."}
                    ]
                },
                {
                    "question": "What is an index in SQL?",
                    "answers": [
                        {"text": "An index is a database object that improves query performance by allowing faster data retrieval.", "score": 5, "feedback": "Great! Clearly explains the role of indexes."},
                        {"text": "Indexes store actual table data separately.", "score": 0, "feedback": "Incorrect. Indexes speed up queries but do not store separate table data."},
                        {"text": "Indexes always make queries faster.", "score": 2, "feedback": "Not necessarily. Indexes can slow down inserts, updates, and deletes."},
                        {"text": "Indexes must be unique.", "score": 3, "feedback": "Partially correct. Unique indexes exist, but not all indexes are unique."},
                        {"text": "Indexes reduce the size of a database.", "score": 1, "feedback": "Incorrect. Indexes increase storage usage."}
                    ]
                },
                {
                    "question": "What is the difference between a clustered and non-clustered index?",
                    "answers": [
                        {"text": "A clustered index determines the physical order of data, while a non-clustered index is stored separately.", "score": 5, "feedback": "Perfect! Clearly distinguishes both types of indexes."},
                        {"text": "Clustered indexes are always faster than non-clustered indexes.", "score": 2, "feedback": "Not always true. The use case determines which is faster."},
                        {"text": "A table can have multiple clustered indexes.", "score": 0, "feedback": "Incorrect. A table can have only one clustered index."},
                        {"text": "Non-clustered indexes store data in sorted order.", "score": 3, "feedback": "Partially correct. Non-clustered indexes store pointers to sorted data."},
                        {"text": "Clustered indexes store indexes separately from table data.", "score": 1, "feedback": "Incorrect. Clustered indexes determine the physical order of data."}
                    ]
                },
                {
                    "question": "What is the difference between UNION and UNION ALL in SQL?",
                    "answers": [
                        {"text": "UNION removes duplicates, while UNION ALL includes all results.", "score": 5, "feedback": "Excellent! Clearly explains the difference."},
                        {"text": "UNION ALL removes duplicate rows.", "score": 0, "feedback": "Incorrect. UNION removes duplicates, but UNION ALL does not."},
                        {"text": "UNION and UNION ALL are the same.", "score": 2, "feedback": "Incorrect. UNION filters out duplicates, while UNION ALL does not."},
                        {"text": "UNION is always faster than UNION ALL.", "score": 3, "feedback": "Not necessarily. UNION requires extra processing to remove duplicates."},
                        {"text": "UNION ALL requires both queries to return the same number of columns.", "score": 4, "feedback": "Correct! Both queries must have the same number and type of columns."}
                    ]
                },
                {
                    "question": "What is a foreign key in SQL?",
                    "answers": [
                        {"text": "A foreign key is a column that establishes a relationship between two tables by referring to a primary key.", "score": 5, "feedback": "Perfect! Clearly defines the purpose of a foreign key."},
                        {"text": "A foreign key must always be unique.", "score": 2, "feedback": "Not necessarily. Foreign keys can contain duplicate values."},
                        {"text": "A foreign key can reference multiple primary keys.", "score": 0, "feedback": "Incorrect. A foreign key references a single primary key."},
                        {"text": "A foreign key ensures referential integrity.", "score": 4, "feedback": "Correct! It maintains consistency between related tables."},
                        {"text": "A foreign key is the same as an index.", "score": 1, "feedback": "Incorrect. Indexes improve performance, while foreign keys enforce relationships."}
                    ]
                },
                {
                    "question": "What is the difference between CHAR and VARCHAR in SQL?",
                    "answers": [
                        {"text": "CHAR has a fixed length, while VARCHAR has a variable length.", "score": 5, "feedback": "Excellent! Clearly explains both data types."},
                        {"text": "CHAR is always faster than VARCHAR.", "score": 2, "feedback": "Not necessarily. It depends on the use case."},
                        {"text": "VARCHAR takes up the same space as CHAR.", "score": 0, "feedback": "Incorrect. VARCHAR uses only as much space as needed."},
                        {"text": "CHAR is used for short strings, while VARCHAR is used for longer strings.", "score": 3, "feedback": "Partially correct, but not the main difference."},
                        {"text": "VARCHAR always has better performance than CHAR.", "score": 1, "feedback": "Incorrect. CHAR can be better for fixed-length values."}
                    ]
                },
                {
                    "question": "What is a stored procedure in SQL?",
                    "answers": [
                        {"text": "A stored procedure is a precompiled collection of SQL statements that can be executed as a unit.", "score": 5, "feedback": "Great! Clearly explains the purpose of stored procedures."},
                        {"text": "A stored procedure is the same as a trigger.", "score": 0, "feedback": "Incorrect. Triggers and stored procedures serve different purposes."},
                        {"text": "Stored procedures must always return a value.", "score": 2, "feedback": "Not necessarily. Some stored procedures return values, others do not."},
                        {"text": "Stored procedures improve performance by reducing redundant code execution.", "score": 4, "feedback": "Correct! They enhance efficiency and reusability."},
                        {"text": "A stored procedure cannot accept parameters.", "score": 1, "feedback": "Incorrect. Stored procedures can take input parameters."}
                    ]
                },
                {
                    "question": "What is the difference between a view and a table in SQL?",
                    "answers": [
                        {"text": "A view is a virtual table created from a query, while a table is a physical storage of data.", "score": 5, "feedback": "Perfect! Clearly differentiates views from tables."},
                        {"text": "A view and a table are the same things.", "score": 0, "feedback": "Incorrect. A view does not store data, but a table does."},
                        {"text": "Views are stored permanently like tables.", "score": 2, "feedback": "Incorrect. Views are dynamically generated when queried."},
                        {"text": "A table is a subset of a view.", "score": 3, "feedback": "Not exactly. A view is created from tables, not the other way around."},
                        {"text": "Views cannot be used in queries.", "score": 1, "feedback": "Incorrect. Views can be queried just like tables."}
                    ]
                },
                {
                    "question": "What is the purpose of the LIMIT clause in SQL?",
                    "answers": [
                        {"text": "LIMIT restricts the number of rows returned by a query.", "score": 5, "feedback": "Excellent! Clearly explains the use of LIMIT."},
                        {"text": "LIMIT is used to sort query results.", "score": 0, "feedback": "Incorrect. ORDER BY is used for sorting."},
                        {"text": "LIMIT works only with numeric columns.", "score": 2, "feedback": "Incorrect. It works with any type of query result."},
                        {"text": "LIMIT must always be used with WHERE.", "score": 3, "feedback": "Not necessarily. LIMIT can be used independently."},
                        {"text": "LIMIT increases query execution time.", "score": 1, "feedback": "Incorrect. It improves efficiency by reducing data retrieval."}
                    ]
                },
                {
                    "question": "What is a transaction in SQL?",
                    "answers": [
                        {"text": "A transaction is a sequence of operations performed as a single logical unit of work.", "score": 5, "feedback": "Great! Clearly explains the concept of transactions."},
                        {"text": "Transactions are used only in SELECT queries.", "score": 0, "feedback": "Incorrect. Transactions apply to INSERT, UPDATE, and DELETE operations."},
                        {"text": "A transaction cannot be rolled back.", "score": 2, "feedback": "Incorrect. Transactions can be rolled back if not committed."},
                        {"text": "Transactions ensure data integrity.", "score": 4, "feedback": "Correct! Transactions maintain consistency and reliability."},
                        {"text": "A transaction must contain exactly one SQL statement.", "score": 1, "feedback": "Incorrect. A transaction can include multiple statements."}
                    ]
                },
                {
                    "question": "What are ACID properties in SQL?",
                    "answers": [
                        {"text": "ACID stands for Atomicity, Consistency, Isolation, and Durability, ensuring reliable transactions.", "score": 5, "feedback": "Excellent! Clearly explains all four properties."},
                        {"text": "ACID is a type of SQL query.", "score": 0, "feedback": "Incorrect. ACID refers to database transaction properties."},
                        {"text": "ACID ensures faster query execution.", "score": 2, "feedback": "Incorrect. ACID ensures reliability, not speed."},
                        {"text": "ACID properties are only used in distributed databases.", "score": 3, "feedback": "Not necessarily. ACID applies to all transactional databases."},
                        {"text": "ACID properties prevent database failures.", "score": 4, "feedback": "Partially correct. They help maintain integrity during failures."}
                    ]
                },
                {
                    "question": "What is the difference between DROP, DELETE, and TRUNCATE in SQL?",
                    "answers": [
                        {"text": "DROP removes the entire table, DELETE removes specific rows, and TRUNCATE clears all rows but keeps the structure.", "score": 5, "feedback": "Perfect! Clearly distinguishes all three commands."},
                        {"text": "DELETE and TRUNCATE are the same.", "score": 0, "feedback": "Incorrect. DELETE logs row-by-row deletions, TRUNCATE does not."},
                        {"text": "DROP and TRUNCATE both remove table structures.", "score": 2, "feedback": "Not true. DROP removes structures, but TRUNCATE keeps them."},
                        {"text": "TRUNCATE is a DML operation.", "score": 3, "feedback": "Incorrect. TRUNCATE is actually a DDL operation."},
                        {"text": "DELETE resets auto-increment values, while TRUNCATE does not.", "score": 1, "feedback": "Incorrect. TRUNCATE resets auto-increment in many cases."}
                    ]
                },
                {
                    "question": "What is the difference between OLTP and OLAP?",
                    "answers": [
                        {"text": "OLTP handles transactional operations, while OLAP supports analytical processing.", "score": 5, "feedback": "Great! Clearly differentiates OLTP and OLAP."},
                        {"text": "OLAP is used for daily transactions.", "score": 0, "feedback": "Incorrect. OLAP is used for analysis, not transactions."},
                        {"text": "OLTP and OLAP serve the same purpose.", "score": 2, "feedback": "Incorrect. OLTP is for real-time operations, while OLAP is for data analysis."},
                        {"text": "OLAP databases are optimized for fast updates.", "score": 3, "feedback": "Not exactly. OLAP focuses on read-heavy workloads."},
                        {"text": "OLTP databases store historical data.", "score": 1, "feedback": "Incorrect. OLTP handles real-time transactional data."}
                    ]
                },
                {
                    "question": "What is a self-join in SQL?",
                    "answers": [
                        {"text": "A self-join joins a table to itself using an alias.", "score": 5, "feedback": "Excellent! Clearly defines self-joins."},
                        {"text": "A self-join requires two tables.", "score": 0, "feedback": "Incorrect. It operates on a single table."},
                        {"text": "Self-joins are only used in hierarchical data.", "score": 2, "feedback": "Not necessarily. Self-joins can be used in various contexts."},
                        {"text": "Self-joins require primary keys.", "score": 3, "feedback": "Incorrect. They use any related columns for matching."},
                        {"text": "Self-joins combine data from multiple databases.", "score": 1, "feedback": "Incorrect. They operate within a single table."}
                    ]
                },
                {
                    "question": "What is the purpose of the CASE statement in SQL?",
                    "answers": [
                        {"text": "The CASE statement allows conditional logic in SQL queries.", "score": 5, "feedback": "Great! Clearly explains how CASE is used."},
                        {"text": "CASE is used to create tables.", "score": 0, "feedback": "Incorrect. CASE is for conditional expressions, not table creation."},
                        {"text": "CASE only works with numeric values.", "score": 2, "feedback": "Incorrect. CASE works with all data types."},
                        {"text": "CASE statements must always have an ELSE clause.", "score": 3, "feedback": "Not necessarily. ELSE is optional but recommended."},
                        {"text": "CASE can be used inside aggregate functions.", "score": 4, "feedback": "Correct! CASE can be used within COUNT, SUM, etc."}
                    ]
                },
                {
                    "question": "What is the purpose of the COALESCE function in SQL?",
                    "answers": [
                        {"text": "COALESCE returns the first non-null value from a list of expressions.", "score": 5, "feedback": "Excellent! Clearly explains COALESCE."},
                        {"text": "COALESCE removes NULL values from a table.", "score": 0, "feedback": "Incorrect. It replaces NULL values but does not remove them."},
                        {"text": "COALESCE is the same as IFNULL.", "score": 2, "feedback": "Not exactly. IFNULL works with only two arguments, while COALESCE can take multiple."},
                        {"text": "COALESCE only works with numeric values.", "score": 3, "feedback": "Incorrect. It works with all data types."},
                        {"text": "COALESCE returns NULL if all expressions are NULL.", "score": 4, "feedback": "Correct! If all inputs are NULL, COALESCE returns NULL."}
                    ]
                },
                {
                    "question": "What is the difference between CROSS JOIN and FULL OUTER JOIN?",
                    "answers": [
                        {"text": "CROSS JOIN produces a Cartesian product, while FULL OUTER JOIN returns matching and non-matching rows from both tables.", "score": 5, "feedback": "Great! Clearly explains the differences."},
                        {"text": "CROSS JOIN and FULL OUTER JOIN return the same results.", "score": 0, "feedback": "Incorrect. They have entirely different behaviors."},
                        {"text": "FULL OUTER JOIN only returns matching rows.", "score": 2, "feedback": "Incorrect. It includes both matching and non-matching rows."},
                        {"text": "CROSS JOIN is faster than FULL OUTER JOIN.", "score": 3, "feedback": "Not necessarily. It depends on the data size."},
                        {"text": "FULL OUTER JOIN cannot return NULL values.", "score": 1, "feedback": "Incorrect. FULL OUTER JOIN includes NULLs for non-matching rows."}
                    ]
                },
                {
                    "question": "What is the purpose of the EXISTS clause in SQL?",
                    "answers": [
                        {"text": "EXISTS checks whether a subquery returns any rows.", "score": 5, "feedback": "Excellent! Clearly explains EXISTS."},
                        {"text": "EXISTS is used to sort query results.", "score": 0, "feedback": "Incorrect. EXISTS is for checking the presence of rows."},
                        {"text": "EXISTS always returns a boolean value.", "score": 2, "feedback": "Partially correct. It determines if rows exist but does not return booleans directly."},
                        {"text": "EXISTS is the same as IN.", "score": 3, "feedback": "Incorrect. EXISTS and IN work differently with subqueries."},
                        {"text": "EXISTS can only be used in DELETE statements.", "score": 1, "feedback": "Incorrect. EXISTS can be used in SELECT, UPDATE, and DELETE queries."}
                    ]
                },
                {
                    "question": "What is a materialized view in SQL?",
                    "answers": [
                        {"text": "A materialized view stores query results physically for faster retrieval.", "score": 5, "feedback": "Perfect! Clearly explains materialized views."},
                        {"text": "Materialized views do not store data.", "score": 0, "feedback": "Incorrect. Unlike regular views, materialized views store data."},
                        {"text": "Materialized views update automatically in real-time.", "score": 2, "feedback": "Not necessarily. They must be refreshed periodically."},
                        {"text": "A materialized view is the same as a table.", "score": 3, "feedback": "Not exactly. It stores query results but is not a standard table."},
                        {"text": "Materialized views are always faster than normal views.", "score": 4, "feedback": "Correct! They improve performance but require storage."}
                    ]
                },
                {
                    "question": "What is a recursive query in SQL?",
                    "answers": [
                        {"text": "A recursive query is a query that references itself, commonly used for hierarchical data.", "score": 5, "feedback": "Excellent! Clearly defines recursive queries."},
                        {"text": "Recursive queries can only be used with numbers.", "score": 0, "feedback": "Incorrect. They can be used for any data type, including hierarchical relationships."},
                        {"text": "Recursive queries must always have an anchor member and a recursive member.", "score": 2, "feedback": "Correct structure, but more explanation is needed."},
                        {"text": "Recursive queries cannot be used in modern databases.", "score": 1, "feedback": "Incorrect. Recursive queries are widely used in SQL databases."},
                        {"text": "Recursive queries use the WITH clause and Common Table Expressions (CTEs).", "score": 4, "feedback": "Correct! CTEs are commonly used for recursion in SQL."}
                    ]
                },
                {
                    "question": "What is data engineering?",
                    "answers": [
                        {"text": "Data engineering is the process of designing and building systems to collect, store, and process data.", "score": 5, "feedback": "Excellent! This is the correct definition."},
                        {"text": "Data engineering is the same as data science.", "score": 0, "feedback": "Incorrect. Data engineering focuses on infrastructure, while data science focuses on analysis."},
                        {"text": "Data engineers only work with databases.", "score": 2, "feedback": "Not entirely true. Data engineers handle pipelines, storage, and processing."},
                        {"text": "Data engineering involves writing SQL queries.", "score": 3, "feedback": "Partially correct. SQL is used, but the role is broader."},
                        {"text": "Data engineering ensures data is structured.", "score": 4, "feedback": "Correct! But it also involves unstructured data processing."}
                    ]
                },
                {
                    "question": "What is ETL in data engineering?",
                    "answers": [
                        {"text": "ETL stands for Extract, Transform, Load, a process used to move and process data.", "score": 5, "feedback": "Great! Clearly defines the ETL process."},
                        {"text": "ETL is a programming language for data pipelines.", "score": 0, "feedback": "Incorrect. ETL is a process, not a language."},
                        {"text": "ETL is only used in real-time data processing.", "score": 2, "feedback": "Incorrect. ETL is used for batch and real-time processing."},
                        {"text": "ETL always loads data into relational databases.", "score": 3, "feedback": "Not necessarily. ETL loads data into various storage systems."},
                        {"text": "ETL and ELT are the same.", "score": 1, "feedback": "Incorrect. ELT performs transformation after loading."}
                    ]
                },
                {
                    "question": "What is the difference between batch and real-time processing?",
                    "answers": [
                        {"text": "Batch processing processes data in chunks, while real-time processing handles data continuously.", "score": 5, "feedback": "Excellent! Clearly differentiates batch and real-time processing."},
                        {"text": "Batch processing is faster than real-time processing.", "score": 2, "feedback": "Not necessarily. Batch is efficient for large volumes, but real-time is low-latency."},
                        {"text": "Real-time processing only works for small datasets.", "score": 0, "feedback": "Incorrect. Real-time processing works for all data sizes."},
                        {"text": "Batch processing requires streaming tools.", "score": 1, "feedback": "Incorrect. Streaming tools are used for real-time data."},
                        {"text": "Batch processing is outdated.", "score": 3, "feedback": "Incorrect. It is still widely used for large-scale data."}
                    ]
                },
                {
                    "question": "What is data modeling in data engineering?",
                    "answers": [
                        {"text": "Data modeling is the process of structuring data for storage and retrieval.", "score": 5, "feedback": "Great! Clearly defines data modeling."},
                        {"text": "Data modeling is only used in NoSQL databases.", "score": 0, "feedback": "Incorrect. It applies to relational and NoSQL databases."},
                        {"text": "Data modeling ensures data security.", "score": 2, "feedback": "Incorrect. It structures data but does not enforce security."},
                        {"text": "Data modeling is the same as data normalization.", "score": 3, "feedback": "Partially correct. Normalization is a part of data modeling."},
                        {"text": "Data modeling only applies to structured data.", "score": 4, "feedback": "Not entirely true. NoSQL modeling deals with semi-structured data as well."}
                    ]
                },
                {
                    "question": "What are data pipelines in data engineering?",
                    "answers": [
                        {"text": "Data pipelines are automated workflows that move and process data between systems.", "score": 5, "feedback": "Perfect! Clearly defines data pipelines."},
                        {"text": "Data pipelines store data permanently.", "score": 0, "feedback": "Incorrect. Pipelines transport data but do not store it long-term."},
                        {"text": "Data pipelines only work in cloud environments.", "score": 2, "feedback": "Incorrect. They can be deployed on-premises as well."},
                        {"text": "Data pipelines are the same as ETL.", "score": 3, "feedback": "Partially correct. ETL is a type of data pipeline."},
                        {"text": "Data pipelines handle both batch and real-time processing.", "score": 4, "feedback": "Correct! They support various data processing methods."}
                    ]
                },
                {
                    "question": "What is the difference between a data warehouse and a data lake?",
                    "answers": [
                        {"text": "A data warehouse stores structured data optimized for analytics, while a data lake stores raw, structured, and unstructured data.", "score": 5, "feedback": "Excellent! Clearly explains the distinction."},
                        {"text": "A data warehouse is always better than a data lake.", "score": 0, "feedback": "Incorrect. Both have different use cases."},
                        {"text": "Data lakes store only structured data.", "score": 2, "feedback": "Incorrect. Data lakes store raw, semi-structured, and unstructured data."},
                        {"text": "Data warehouses are used for real-time analytics, while data lakes are for batch processing.", "score": 3, "feedback": "Partially correct, but data warehouses can also handle batch processing."},
                        {"text": "A data lake requires schema on read, whereas a data warehouse requires schema on write.", "score": 4, "feedback": "Correct! Data lakes apply schema during querying, not before storage."}
                    ]
                },
                {
                    "question": "What is schema evolution in data engineering?",
                    "answers": [
                        {"text": "Schema evolution refers to the ability of a database or data storage system to adapt to changing data structures over time.", "score": 5, "feedback": "Great! Clearly defines schema evolution."},
                        {"text": "Schema evolution only applies to SQL databases.", "score": 0, "feedback": "Incorrect. It is relevant for NoSQL and big data systems as well."},
                        {"text": "Schema evolution prevents any changes to the data model.", "score": 2, "feedback": "Incorrect. It allows gradual changes in data structures."},
                        {"text": "Schema evolution is not needed in modern data systems.", "score": 1, "feedback": "Incorrect. It is crucial for dynamic and scalable data storage."},
                        {"text": "Schema evolution allows tables to change structure without affecting existing data.", "score": 4, "feedback": "Correct! It enables flexible data updates."}
                    ]
                },
                {
                    "question": "What is data partitioning in databases?",
                    "answers": [
                        {"text": "Data partitioning is the process of dividing large datasets into smaller, more manageable parts to improve performance.", "score": 5, "feedback": "Excellent! Clearly defines data partitioning."},
                        {"text": "Data partitioning is only used in NoSQL databases.", "score": 0, "feedback": "Incorrect. It is used in SQL and NoSQL systems."},
                        {"text": "Partitioning increases database storage size.", "score": 2, "feedback": "Not exactly. It improves query performance but does not inherently increase storage."},
                        {"text": "Partitioning is the same as indexing.", "score": 3, "feedback": "Incorrect. Indexing helps retrieval, while partitioning organizes data."},
                        {"text": "Partitioning can be horizontal or vertical.", "score": 4, "feedback": "Correct! Data can be divided by rows (horizontal) or columns (vertical)."}
                    ]
                },
                {
                    "question": "What are the benefits of using cloud-based data engineering solutions?",
                    "answers": [
                        {"text": "Cloud-based data engineering offers scalability, flexibility, and cost efficiency.", "score": 5, "feedback": "Great! Clearly explains cloud benefits."},
                        {"text": "Cloud storage is always cheaper than on-premises storage.", "score": 0, "feedback": "Incorrect. Costs vary based on usage and requirements."},
                        {"text": "Cloud computing eliminates all security risks.", "score": 2, "feedback": "Incorrect. Security risks still exist and need proper management."},
                        {"text": "Cloud platforms require constant manual scaling.", "score": 3, "feedback": "Not necessarily. Many cloud services offer auto-scaling."},
                        {"text": "Cloud data engineering solutions integrate easily with big data frameworks.", "score": 4, "feedback": "Correct! Cloud platforms often support Hadoop, Spark, etc."}
                    ]
                },
                {
                    "question": "What is a data catalog in data engineering?",
                    "answers": [
                        {"text": "A data catalog is a centralized inventory that helps users discover and manage metadata about datasets.", "score": 5, "feedback": "Excellent! Clearly defines the purpose of a data catalog."},
                        {"text": "A data catalog stores actual data.", "score": 0, "feedback": "Incorrect. It stores metadata, not raw data."},
                        {"text": "Data catalogs are only used for relational databases.", "score": 2, "feedback": "Incorrect. They work for structured and unstructured data sources."},
                        {"text": "A data catalog replaces the need for ETL processes.", "score": 3, "feedback": "Incorrect. It assists with data discovery, not transformation."},
                        {"text": "Data catalogs improve data governance and compliance.", "score": 4, "feedback": "Correct! They enhance data accessibility and security."}
                    ]
                },
                {
                    "question": "What is the role of a data engineer in a data-driven organization?",
                    "answers": [
                        {"text": "A data engineer designs, builds, and maintains data infrastructure for efficient data processing and storage.", "score": 5, "feedback": "Excellent! Clearly defines the responsibilities of a data engineer."},
                        {"text": "A data engineer only writes SQL queries.", "score": 0, "feedback": "Incorrect. The role involves building pipelines, optimizing storage, and integrating data sources."},
                        {"text": "Data engineers primarily focus on data visualization.", "score": 2, "feedback": "Not entirely correct. Data visualization is more of a data scientist's role."},
                        {"text": "A data engineer ensures data is available and reliable for analysis.", "score": 4, "feedback": "Correct! Data engineers enable efficient access to clean data."},
                        {"text": "Data engineers are responsible for training machine learning models.", "score": 1, "feedback": "Incorrect. That is typically the role of data scientists or ML engineers."}
                    ]
                },
                {
                    "question": "What is a data lakehouse?",
                    "answers": [
                        {"text": "A data lakehouse is a hybrid approach that combines the features of data lakes and data warehouses.", "score": 5, "feedback": "Great! Clearly explains the concept of a data lakehouse."},
                        {"text": "A data lakehouse is another term for a data lake.", "score": 0, "feedback": "Incorrect. It integrates structured and unstructured data efficiently."},
                        {"text": "Data lakehouses store only structured data.", "score": 2, "feedback": "Incorrect. They support both structured and unstructured data."},
                        {"text": "Data lakehouses require schema enforcement before storage.", "score": 3, "feedback": "Partially correct. They support schema enforcement but allow flexibility."},
                        {"text": "A data lakehouse eliminates the need for ETL processes.", "score": 1, "feedback": "Incorrect. ETL is still required for data transformation and integration."}
                    ]
                },
                {
                    "question": "What are the challenges of managing big data?",
                    "answers": [
                        {"text": "Challenges include scalability, data quality, storage management, and processing speed.", "score": 5, "feedback": "Excellent! Clearly lists key challenges in big data management."},
                        {"text": "Big data management is easy with cloud services.", "score": 0, "feedback": "Incorrect. Cloud services help but do not eliminate challenges."},
                        {"text": "Big data only refers to large storage volumes.", "score": 2, "feedback": "Incorrect. Big data also involves processing and retrieval challenges."},
                        {"text": "Big data is only used in machine learning applications.", "score": 3, "feedback": "Not entirely correct. It applies to various industries beyond AI."},
                        {"text": "Big data challenges can be solved using distributed computing.", "score": 4, "feedback": "Correct! Technologies like Hadoop and Spark address scalability issues."}
                    ]
                },
                {
                    "question": "What is the difference between structured, semi-structured, and unstructured data?",
                    "answers": [
                        {"text": "Structured data is organized in a fixed format, semi-structured data has some organization, and unstructured data has no predefined format.", "score": 5, "feedback": "Great! Clearly defines all three data types."},
                        {"text": "Structured data is always stored in SQL databases.", "score": 2, "feedback": "Not necessarily. Some NoSQL databases also store structured data."},
                        {"text": "Semi-structured data is the same as structured data.", "score": 0, "feedback": "Incorrect. Semi-structured data has some organization but lacks strict schemas."},
                        {"text": "Unstructured data cannot be analyzed.", "score": 1, "feedback": "Incorrect. AI and big data tools can process unstructured data."},
                        {"text": "JSON and XML are examples of semi-structured data.", "score": 4, "feedback": "Correct! These formats have some structure but are flexible."}
                    ]
                },
                {
                    "question": "What is the role of Apache Kafka in data engineering?",
                    "answers": [
                        {"text": "Apache Kafka is a distributed event streaming platform used for real-time data ingestion and processing.", "score": 5, "feedback": "Excellent! Clearly explains Kafkaâ€™s role."},
                        {"text": "Kafka is a relational database for storing transactional data.", "score": 0, "feedback": "Incorrect. Kafka is used for event-driven messaging and streaming."},
                        {"text": "Kafka only works with structured data.", "score": 2, "feedback": "Incorrect. Kafka handles structured, semi-structured, and unstructured data."},
                        {"text": "Kafka is mainly used for batch processing.", "score": 3, "feedback": "Not entirely correct. It is primarily used for streaming."},
                        {"text": "Kafka enables fault-tolerant, real-time data pipelines.", "score": 4, "feedback": "Correct! Kafka provides scalability and reliability in streaming applications."}
                    ]
                }

    
]
